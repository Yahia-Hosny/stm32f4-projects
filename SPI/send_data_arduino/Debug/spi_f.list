
spi_f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000944  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08000ad8  08000ad8  00010ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ba4  08000ba4  00010bac  2**0
                  CONTENTS
  4 .ARM          00000000  08000ba4  08000ba4  00010bac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ba4  08000bac  00010bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ba4  08000ba4  00010ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ba8  08000ba8  00010ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000bac  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000bac  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010bac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010bd6  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001267  00000000  00000000  00010c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004f9  00000000  00000000  00011e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00012380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fd  00000000  00000000  000124e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024a1  00000000  00000000  000125dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001755  00000000  00000000  00014a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000980e  00000000  00000000  000161d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000518  00000000  00000000  0001f9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0001fefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000ac0 	.word	0x08000ac0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000ac0 	.word	0x08000ac0

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <delay>:

#include<string.h>
#include "stm32f401_spi.h"

void delay(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e002      	b.n	80001f6 <delay+0x12>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3301      	adds	r3, #1
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <delay+0x28>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d9f8      	bls.n	80001f0 <delay+0xc>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	0007a11f 	.word	0x0007a11f

08000210 <SPI2_GPIOInits>:
 *

 */

void SPI2_GPIOInits(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
	GPIO_Handler SPIPins;

	SPIPins.GPIOX = GPIOB;
 8000216:	4b11      	ldr	r3, [pc, #68]	; (800025c <SPI2_GPIOInits+0x4c>)
 8000218:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_Pin_Conf.PinMode = GPIO_MODE_ALTFN;
 800021a:	2302      	movs	r3, #2
 800021c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_Pin_Conf.PinAltFn = 5;
 800021e:	2305      	movs	r3, #5
 8000220:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_Pin_Conf.PinOPTYP = GPIO_OUTYPE_PP;
 8000222:	2300      	movs	r3, #0
 8000224:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_Pin_Conf.PinPUPDR = GPIO_PIN_PUPD_NO;
 8000226:	2300      	movs	r3, #0
 8000228:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_Pin_Conf.PinSpeed = GPIO_OUTSPEED_HIGH;
 800022a:	2302      	movs	r3, #2
 800022c:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_Pin_Conf.PinNum = GPIO_PIN_13;
 800022e:	230d      	movs	r3, #13
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_init(&SPIPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f905 	bl	8000444 <GPIO_init>

	//MOSI
	SPIPins.GPIO_Pin_Conf.PinNum  = GPIO_PIN_15;
 800023a:	230f      	movs	r3, #15
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_init(&SPIPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f8ff 	bl	8000444 <GPIO_init>
	//SPIPins.GPIO_Pin_Conf.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_init(&SPIPins);


	//NSS
	SPIPins.GPIO_Pin_Conf.PinNum = GPIO_PIN_12;
 8000246:	230c      	movs	r3, #12
 8000248:	723b      	strb	r3, [r7, #8]
	GPIO_init(&SPIPins);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f8f9 	bl	8000444 <GPIO_init>

}
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40020400 	.word	0x40020400

08000260 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0

	SPI_Handler SPI2handle;

	SPI2handle.pSPI = SPI2;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <SPI2_Inits+0x38>)
 8000268:	607b      	str	r3, [r7, #4]
	SPI2handle.SpiConfig.SPI_BusConfg = SPI_BUS_CONFIG_FD;
 800026a:	2301      	movs	r3, #1
 800026c:	727b      	strb	r3, [r7, #9]
	SPI2handle.SpiConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800026e:	2301      	movs	r3, #1
 8000270:	723b      	strb	r3, [r7, #8]
	SPI2handle.SpiConfig.SPI_Speed = SPI_SPEED_DIV32;
 8000272:	2304      	movs	r3, #4
 8000274:	73bb      	strb	r3, [r7, #14]
	SPI2handle.SpiConfig.SPI_DFF = SPI_DFF_8_BITS;
 8000276:	2300      	movs	r3, #0
 8000278:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SpiConfig.SPI_CPOL = SPI_CPOL_LOW;
 800027a:	2300      	movs	r3, #0
 800027c:	733b      	strb	r3, [r7, #12]
	SPI2handle.SpiConfig.SPI_CPHA = SPI_CPHA_LOW;
 800027e:	2300      	movs	r3, #0
 8000280:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SpiConfig.SPI_SSM = SPI_SSM_DS; //Hardware slave management enabled for NSS pin
 8000282:	2300      	movs	r3, #0
 8000284:	737b      	strb	r3, [r7, #13]

	SPI_init(&SPI2handle);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fae9 	bl	8000860 <SPI_init>
}
 800028e:	bf00      	nop
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40003800 	.word	0x40003800

0800029c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
	GPIO_Handler GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.GPIOX = GPIOA;
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <GPIO_ButtonInit+0x2c>)
 80002a4:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_Pin_Conf.PinNum    = GPIO_PIN_0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_Pin_Conf.PinMode   = GPIO_MODE_IN;
 80002aa:	2300      	movs	r3, #0
 80002ac:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_Pin_Conf.PinSpeed  = GPIO_OUTSPEED_HIGH;
 80002ae:	2302      	movs	r3, #2
 80002b0:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_Pin_Conf.PinPUPDR  = GPIO_PIN_PUPD_NO;
 80002b2:	2300      	movs	r3, #0
 80002b4:	72fb      	strb	r3, [r7, #11]

	GPIO_init(&GPIOBtn);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f8c3 	bl	8000444 <GPIO_init>

}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40020000 	.word	0x40020000

080002cc <main>:


int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b0b4      	sub	sp, #208	; 0xd0
 80002d0:	af00      	add	r7, sp, #0
	char user_data[] = "An Arduino Uno board is best suited for beginners who have just started using microcontrollers, on the other hand, Arduino Mega board is for enthusiasts who require a lot of I/O pins for their projects";
 80002d2:	4a21      	ldr	r2, [pc, #132]	; (8000358 <main+0x8c>)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4611      	mov	r1, r2
 80002d8:	22ca      	movs	r2, #202	; 0xca
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 fbe2 	bl	8000aa4 <memcpy>

	GPIO_ButtonInit();
 80002e0:	f7ff ffdc 	bl	800029c <GPIO_ButtonInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80002e4:	f7ff ff94 	bl	8000210 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80002e8:	f7ff ffba 	bl	8000260 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_ssoe_conf(SPI2,ENABLE);
 80002ec:	2101      	movs	r1, #1
 80002ee:	481b      	ldr	r0, [pc, #108]	; (800035c <main+0x90>)
 80002f0:	f000 fb6f 	bl	80009d2 <SPI_ssoe_conf>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadPin(GPIOA,GPIO_PIN_0) );
 80002f4:	bf00      	nop
 80002f6:	2100      	movs	r1, #0
 80002f8:	4819      	ldr	r0, [pc, #100]	; (8000360 <main+0x94>)
 80002fa:	f000 fa19 	bl	8000730 <GPIO_ReadPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d0f8      	beq.n	80002f6 <main+0x2a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000304:	f7ff ff6e 	bl	80001e4 <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 8000308:	2101      	movs	r1, #1
 800030a:	4814      	ldr	r0, [pc, #80]	; (800035c <main+0x90>)
 800030c:	f000 fb46 	bl	800099c <SPI_PeripheralControl>

		//first send length information
		uint8_t dataLen = strlen(user_data);
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ff5e 	bl	80001d4 <strlen>
 8000318:	4603      	mov	r3, r0
 800031a:	b2db      	uxtb	r3, r3
 800031c:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2,&dataLen,1);
 800031e:	1cfb      	adds	r3, r7, #3
 8000320:	2201      	movs	r2, #1
 8000322:	4619      	mov	r1, r3
 8000324:	480d      	ldr	r0, [pc, #52]	; (800035c <main+0x90>)
 8000326:	f000 faf6 	bl	8000916 <SPI_SendData>

		//to send data
		SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ff51 	bl	80001d4 <strlen>
 8000332:	4602      	mov	r2, r0
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	4808      	ldr	r0, [pc, #32]	; (800035c <main+0x90>)
 800033a:	f000 faec 	bl	8000916 <SPI_SendData>

		//lets confirm SPI is not busy
		while( GetFlagStatus(SPI2,SPI_BSY_FLAG) );
 800033e:	bf00      	nop
 8000340:	2180      	movs	r1, #128	; 0x80
 8000342:	4806      	ldr	r0, [pc, #24]	; (800035c <main+0x90>)
 8000344:	f000 fa09 	bl	800075a <GetFlagStatus>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d1f8      	bne.n	8000340 <main+0x74>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 800034e:	2100      	movs	r1, #0
 8000350:	4802      	ldr	r0, [pc, #8]	; (800035c <main+0x90>)
 8000352:	f000 fb23 	bl	800099c <SPI_PeripheralControl>
	{
 8000356:	e7cd      	b.n	80002f4 <main+0x28>
 8000358:	08000ad8 	.word	0x08000ad8
 800035c:	40003800 	.word	0x40003800
 8000360:	40020000 	.word	0x40020000

08000364 <GPIO_clkCntrl>:
*
* @Note              -  none

 */
void GPIO_clkCntrl(GPIO_REGDEF *pGpio, uint8_t EnOrDsi)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
    if (EnOrDsi == ENABLE)
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d12b      	bne.n	80003ce <GPIO_clkCntrl+0x6a>
    {
        if (pGpio == GPIOA)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a2d      	ldr	r2, [pc, #180]	; (8000430 <GPIO_clkCntrl+0xcc>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_clkCntrl+0x28>
        {
            GPIOA_PCLK_EN;
 800037e:	4b2d      	ldr	r3, [pc, #180]	; (8000434 <GPIO_clkCntrl+0xd0>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a2c      	ldr	r2, [pc, #176]	; (8000434 <GPIO_clkCntrl+0xd0>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6313      	str	r3, [r2, #48]	; 0x30
        else if (pGpio == GPIOD)
        {
            GPIOD_PCLK_DS;
        }
    }
}
 800038a:	e04b      	b.n	8000424 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOB)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a2a      	ldr	r2, [pc, #168]	; (8000438 <GPIO_clkCntrl+0xd4>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_clkCntrl+0x3e>
            GPIOB_PCLK_EN;
 8000394:	4b27      	ldr	r3, [pc, #156]	; (8000434 <GPIO_clkCntrl+0xd0>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000398:	4a26      	ldr	r2, [pc, #152]	; (8000434 <GPIO_clkCntrl+0xd0>)
 800039a:	f043 0302 	orr.w	r3, r3, #2
 800039e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a0:	e040      	b.n	8000424 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOC)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a25      	ldr	r2, [pc, #148]	; (800043c <GPIO_clkCntrl+0xd8>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_clkCntrl+0x54>
            GPIOC_PCLK_EN;
 80003aa:	4b22      	ldr	r3, [pc, #136]	; (8000434 <GPIO_clkCntrl+0xd0>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	4a21      	ldr	r2, [pc, #132]	; (8000434 <GPIO_clkCntrl+0xd0>)
 80003b0:	f043 0304 	orr.w	r3, r3, #4
 80003b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b6:	e035      	b.n	8000424 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOD)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a21      	ldr	r2, [pc, #132]	; (8000440 <GPIO_clkCntrl+0xdc>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d131      	bne.n	8000424 <GPIO_clkCntrl+0xc0>
            GPIOD_PCLK_EN;
 80003c0:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <GPIO_clkCntrl+0xd0>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	4a1b      	ldr	r2, [pc, #108]	; (8000434 <GPIO_clkCntrl+0xd0>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003cc:	e02a      	b.n	8000424 <GPIO_clkCntrl+0xc0>
        if (pGpio == GPIOA)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a17      	ldr	r2, [pc, #92]	; (8000430 <GPIO_clkCntrl+0xcc>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_clkCntrl+0x80>
            GPIOA_PCLK_DS;
 80003d6:	4b17      	ldr	r3, [pc, #92]	; (8000434 <GPIO_clkCntrl+0xd0>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a16      	ldr	r2, [pc, #88]	; (8000434 <GPIO_clkCntrl+0xd0>)
 80003dc:	f023 0301 	bic.w	r3, r3, #1
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e2:	e01f      	b.n	8000424 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOB)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a14      	ldr	r2, [pc, #80]	; (8000438 <GPIO_clkCntrl+0xd4>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <GPIO_clkCntrl+0x96>
            GPIOB_PCLK_DS;
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <GPIO_clkCntrl+0xd0>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4a10      	ldr	r2, [pc, #64]	; (8000434 <GPIO_clkCntrl+0xd0>)
 80003f2:	f023 0302 	bic.w	r3, r3, #2
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f8:	e014      	b.n	8000424 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOC)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a0f      	ldr	r2, [pc, #60]	; (800043c <GPIO_clkCntrl+0xd8>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_clkCntrl+0xac>
            GPIOC_PCLK_DS;
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <GPIO_clkCntrl+0xd0>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000406:	4a0b      	ldr	r2, [pc, #44]	; (8000434 <GPIO_clkCntrl+0xd0>)
 8000408:	f023 0304 	bic.w	r3, r3, #4
 800040c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040e:	e009      	b.n	8000424 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOD)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a0b      	ldr	r2, [pc, #44]	; (8000440 <GPIO_clkCntrl+0xdc>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d105      	bne.n	8000424 <GPIO_clkCntrl+0xc0>
            GPIOD_PCLK_DS;
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <GPIO_clkCntrl+0xd0>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041c:	4a05      	ldr	r2, [pc, #20]	; (8000434 <GPIO_clkCntrl+0xd0>)
 800041e:	f023 0308 	bic.w	r3, r3, #8
 8000422:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40020000 	.word	0x40020000
 8000434:	40023800 	.word	0x40023800
 8000438:	40020400 	.word	0x40020400
 800043c:	40020800 	.word	0x40020800
 8000440:	40020c00 	.word	0x40020c00

08000444 <GPIO_init>:
* @Note              -  none

 */
void GPIO_init(GPIO_Handler *pGpioHandler)

{ // pin number
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	 GPIO_clkCntrl(pGpioHandler ->GPIOX, ENABLE);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2101      	movs	r1, #1
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff86 	bl	8000364 <GPIO_clkCntrl>
	 uint32_t temp =0 ;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
    if (pGpioHandler->GPIO_Pin_Conf.PinMode <= GPIO_MODE_ANALOG)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	795b      	ldrb	r3, [r3, #5]
 8000460:	2b03      	cmp	r3, #3
 8000462:	f200 80bf 	bhi.w	80005e4 <GPIO_init+0x1a0>
    {
        // pin mode

        temp |= ((pGpioHandler->GPIO_Pin_Conf.PinMode) << (2 * (pGpioHandler->GPIO_Pin_Conf.PinNum)));
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	795b      	ldrb	r3, [r3, #5]
 800046a:	461a      	mov	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	791b      	ldrb	r3, [r3, #4]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	fa02 f303 	lsl.w	r3, r2, r3
 8000476:	461a      	mov	r2, r3
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	4313      	orrs	r3, r2
 800047c:	617b      	str	r3, [r7, #20]
        pGpioHandler->GPIOX->MODER &= ~((0x3) << (pGpioHandler->GPIO_Pin_Conf.PinNum));
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	4619      	mov	r1, r3
 800048a:	2303      	movs	r3, #3
 800048c:	408b      	lsls	r3, r1
 800048e:	43db      	mvns	r3, r3
 8000490:	4619      	mov	r1, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	400a      	ands	r2, r1
 8000498:	601a      	str	r2, [r3, #0]
        pGpioHandler->GPIOX->MODER |= temp;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	6819      	ldr	r1, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	697a      	ldr	r2, [r7, #20]
 80004a6:	430a      	orrs	r2, r1
 80004a8:	601a      	str	r2, [r3, #0]

        // pin speed
        temp |= ((pGpioHandler->GPIO_Pin_Conf.PinSpeed) << (2 * (pGpioHandler->GPIO_Pin_Conf.PinNum)));
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	799b      	ldrb	r3, [r3, #6]
 80004ae:	461a      	mov	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	791b      	ldrb	r3, [r3, #4]
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	4313      	orrs	r3, r2
 80004c0:	617b      	str	r3, [r7, #20]
        pGpioHandler->GPIOX->OSPEEDR &= ~((0x3) << (pGpioHandler->GPIO_Pin_Conf.PinNum));
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	689a      	ldr	r2, [r3, #8]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	791b      	ldrb	r3, [r3, #4]
 80004cc:	4619      	mov	r1, r3
 80004ce:	2303      	movs	r3, #3
 80004d0:	408b      	lsls	r3, r1
 80004d2:	43db      	mvns	r3, r3
 80004d4:	4619      	mov	r1, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	400a      	ands	r2, r1
 80004dc:	609a      	str	r2, [r3, #8]
        pGpioHandler->GPIOX->OSPEEDR |= temp;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6899      	ldr	r1, [r3, #8]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	697a      	ldr	r2, [r7, #20]
 80004ea:	430a      	orrs	r2, r1
 80004ec:	609a      	str	r2, [r3, #8]

        // pin pupd control

        temp |= ((pGpioHandler->GPIO_Pin_Conf.PinPUPDR) << (2 * (pGpioHandler->GPIO_Pin_Conf.PinNum)));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	79db      	ldrb	r3, [r3, #7]
 80004f2:	461a      	mov	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	fa02 f303 	lsl.w	r3, r2, r3
 80004fe:	461a      	mov	r2, r3
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	4313      	orrs	r3, r2
 8000504:	617b      	str	r3, [r7, #20]
        pGpioHandler->GPIOX->PUPDR &= ~((0x3) << (2 * pGpioHandler->GPIO_Pin_Conf.PinNum));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	68da      	ldr	r2, [r3, #12]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	791b      	ldrb	r3, [r3, #4]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	2103      	movs	r1, #3
 8000514:	fa01 f303 	lsl.w	r3, r1, r3
 8000518:	43db      	mvns	r3, r3
 800051a:	4619      	mov	r1, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	400a      	ands	r2, r1
 8000522:	60da      	str	r2, [r3, #12]
        pGpioHandler->GPIOX->PUPDR |= temp;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	68d9      	ldr	r1, [r3, #12]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	697a      	ldr	r2, [r7, #20]
 8000530:	430a      	orrs	r2, r1
 8000532:	60da      	str	r2, [r3, #12]

        // pin otype control

        temp |= ((pGpioHandler->GPIO_Pin_Conf.PinOPTYP) << ((pGpioHandler->GPIO_Pin_Conf.PinNum)));
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	7a1b      	ldrb	r3, [r3, #8]
 8000538:	461a      	mov	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	791b      	ldrb	r3, [r3, #4]
 800053e:	fa02 f303 	lsl.w	r3, r2, r3
 8000542:	461a      	mov	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	4313      	orrs	r3, r2
 8000548:	617b      	str	r3, [r7, #20]
        pGpioHandler->GPIOX->OTYPER &= ~((0x3) << (pGpioHandler->GPIO_Pin_Conf.PinNum));
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	685a      	ldr	r2, [r3, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	4619      	mov	r1, r3
 8000556:	2303      	movs	r3, #3
 8000558:	408b      	lsls	r3, r1
 800055a:	43db      	mvns	r3, r3
 800055c:	4619      	mov	r1, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	400a      	ands	r2, r1
 8000564:	605a      	str	r2, [r3, #4]
        pGpioHandler->GPIOX->OTYPER |= temp;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	6859      	ldr	r1, [r3, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	430a      	orrs	r2, r1
 8000574:	605a      	str	r2, [r3, #4]

        // pin alternate fn  control
        if ((pGpioHandler->GPIO_Pin_Conf.PinMode) == GPIO_MODE_ALTFN)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	795b      	ldrb	r3, [r3, #5]
 800057a:	2b02      	cmp	r3, #2
 800057c:	f040 80c6 	bne.w	800070c <GPIO_init+0x2c8>
        {
            // config for the alt fn
            uint8_t temp1, temp2;
            temp1 = (pGpioHandler->GPIO_Pin_Conf.PinNum) / 8;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	08db      	lsrs	r3, r3, #3
 8000586:	743b      	strb	r3, [r7, #16]
            temp2 = (pGpioHandler->GPIO_Pin_Conf.PinNum) % 8;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	f003 0307 	and.w	r3, r3, #7
 8000590:	73fb      	strb	r3, [r7, #15]
            pGpioHandler->GPIOX->AFR[temp1] &= ~((0xF) << (temp2));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	7c3a      	ldrb	r2, [r7, #16]
 8000598:	3208      	adds	r2, #8
 800059a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	220f      	movs	r2, #15
 80005a2:	fa02 f303 	lsl.w	r3, r2, r3
 80005a6:	43db      	mvns	r3, r3
 80005a8:	4618      	mov	r0, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	7c3a      	ldrb	r2, [r7, #16]
 80005b0:	4001      	ands	r1, r0
 80005b2:	3208      	adds	r2, #8
 80005b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            pGpioHandler->GPIOX->AFR[temp1] |= ((pGpioHandler->GPIO_Pin_Conf.PinAltFn) << (4 * (temp2)));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	7c3a      	ldrb	r2, [r7, #16]
 80005be:	3208      	adds	r2, #8
 80005c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	7a5b      	ldrb	r3, [r3, #9]
 80005c8:	461a      	mov	r2, r3
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	7c3a      	ldrb	r2, [r7, #16]
 80005da:	4301      	orrs	r1, r0
 80005dc:	3208      	adds	r2, #8
 80005de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                // ENABLE INTERRUPT DELIVERY
                EXTI ->IMR |= ( 1 <<pGpioHandler->GPIO_Pin_Conf.PinNum );


        }
}
 80005e2:	e093      	b.n	800070c <GPIO_init+0x2c8>
            if (pGpioHandler->GPIO_Pin_Conf.PinMode == GPIO_MODE_IT_FT )
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	795b      	ldrb	r3, [r3, #5]
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	d117      	bne.n	800061c <GPIO_init+0x1d8>
                EXTI ->FTSR |= (1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 80005ec:	4b49      	ldr	r3, [pc, #292]	; (8000714 <GPIO_init+0x2d0>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	7912      	ldrb	r2, [r2, #4]
 80005f4:	4611      	mov	r1, r2
 80005f6:	2201      	movs	r2, #1
 80005f8:	408a      	lsls	r2, r1
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a45      	ldr	r2, [pc, #276]	; (8000714 <GPIO_init+0x2d0>)
 80005fe:	430b      	orrs	r3, r1
 8000600:	60d3      	str	r3, [r2, #12]
                EXTI ->RTSR &= ~(1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 8000602:	4b44      	ldr	r3, [pc, #272]	; (8000714 <GPIO_init+0x2d0>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	7912      	ldrb	r2, [r2, #4]
 800060a:	4611      	mov	r1, r2
 800060c:	2201      	movs	r2, #1
 800060e:	408a      	lsls	r2, r1
 8000610:	43d2      	mvns	r2, r2
 8000612:	4611      	mov	r1, r2
 8000614:	4a3f      	ldr	r2, [pc, #252]	; (8000714 <GPIO_init+0x2d0>)
 8000616:	400b      	ands	r3, r1
 8000618:	6093      	str	r3, [r2, #8]
 800061a:	e035      	b.n	8000688 <GPIO_init+0x244>
            else if (pGpioHandler->GPIO_Pin_Conf.PinMode == GPIO_MODE_IT_RT)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	795b      	ldrb	r3, [r3, #5]
 8000620:	2b05      	cmp	r3, #5
 8000622:	d117      	bne.n	8000654 <GPIO_init+0x210>
                EXTI ->RTSR |= (1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 8000624:	4b3b      	ldr	r3, [pc, #236]	; (8000714 <GPIO_init+0x2d0>)
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	7912      	ldrb	r2, [r2, #4]
 800062c:	4611      	mov	r1, r2
 800062e:	2201      	movs	r2, #1
 8000630:	408a      	lsls	r2, r1
 8000632:	4611      	mov	r1, r2
 8000634:	4a37      	ldr	r2, [pc, #220]	; (8000714 <GPIO_init+0x2d0>)
 8000636:	430b      	orrs	r3, r1
 8000638:	6093      	str	r3, [r2, #8]
                EXTI ->FTSR &= ~(1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 800063a:	4b36      	ldr	r3, [pc, #216]	; (8000714 <GPIO_init+0x2d0>)
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	7912      	ldrb	r2, [r2, #4]
 8000642:	4611      	mov	r1, r2
 8000644:	2201      	movs	r2, #1
 8000646:	408a      	lsls	r2, r1
 8000648:	43d2      	mvns	r2, r2
 800064a:	4611      	mov	r1, r2
 800064c:	4a31      	ldr	r2, [pc, #196]	; (8000714 <GPIO_init+0x2d0>)
 800064e:	400b      	ands	r3, r1
 8000650:	60d3      	str	r3, [r2, #12]
 8000652:	e019      	b.n	8000688 <GPIO_init+0x244>
            else if (pGpioHandler->GPIO_Pin_Conf.PinMode == GPIO_MODE_IT_RFT)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	795b      	ldrb	r3, [r3, #5]
 8000658:	2b06      	cmp	r3, #6
 800065a:	d115      	bne.n	8000688 <GPIO_init+0x244>
                EXTI ->RTSR |=  (1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 800065c:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <GPIO_init+0x2d0>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	7912      	ldrb	r2, [r2, #4]
 8000664:	4611      	mov	r1, r2
 8000666:	2201      	movs	r2, #1
 8000668:	408a      	lsls	r2, r1
 800066a:	4611      	mov	r1, r2
 800066c:	4a29      	ldr	r2, [pc, #164]	; (8000714 <GPIO_init+0x2d0>)
 800066e:	430b      	orrs	r3, r1
 8000670:	6093      	str	r3, [r2, #8]
                EXTI ->FTSR |=  (1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 8000672:	4b28      	ldr	r3, [pc, #160]	; (8000714 <GPIO_init+0x2d0>)
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	7912      	ldrb	r2, [r2, #4]
 800067a:	4611      	mov	r1, r2
 800067c:	2201      	movs	r2, #1
 800067e:	408a      	lsls	r2, r1
 8000680:	4611      	mov	r1, r2
 8000682:	4a24      	ldr	r2, [pc, #144]	; (8000714 <GPIO_init+0x2d0>)
 8000684:	430b      	orrs	r3, r1
 8000686:	60d3      	str	r3, [r2, #12]
                uint8_t temp4  =pGpioHandler->GPIO_Pin_Conf.PinNum / 4;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	089b      	lsrs	r3, r3, #2
 800068e:	74fb      	strb	r3, [r7, #19]
                uint8_t temp5 =pGpioHandler->GPIO_Pin_Conf.PinNum % 4;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	f003 0303 	and.w	r3, r3, #3
 8000698:	74bb      	strb	r3, [r7, #18]
                uint8_t pinCode = GPIO_BASE_CODE(pGpioHandler->GPIOX) ;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <GPIO_init+0x2d4>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d016      	beq.n	80006d2 <GPIO_init+0x28e>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a1c      	ldr	r2, [pc, #112]	; (800071c <GPIO_init+0x2d8>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d00f      	beq.n	80006ce <GPIO_init+0x28a>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <GPIO_init+0x2dc>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d008      	beq.n	80006ca <GPIO_init+0x286>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a19      	ldr	r2, [pc, #100]	; (8000724 <GPIO_init+0x2e0>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d101      	bne.n	80006c6 <GPIO_init+0x282>
 80006c2:	2303      	movs	r3, #3
 80006c4:	e006      	b.n	80006d4 <GPIO_init+0x290>
 80006c6:	2300      	movs	r3, #0
 80006c8:	e004      	b.n	80006d4 <GPIO_init+0x290>
 80006ca:	2302      	movs	r3, #2
 80006cc:	e002      	b.n	80006d4 <GPIO_init+0x290>
 80006ce:	2301      	movs	r3, #1
 80006d0:	e000      	b.n	80006d4 <GPIO_init+0x290>
 80006d2:	2300      	movs	r3, #0
 80006d4:	747b      	strb	r3, [r7, #17]
                SYSCFG_PCLK_EN;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <GPIO_init+0x2e4>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006da:	4a13      	ldr	r2, [pc, #76]	; (8000728 <GPIO_init+0x2e4>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e0:	6453      	str	r3, [r2, #68]	; 0x44
                SYSCFG -> EXTICR[temp4] = (pinCode << temp5 * 4 );
 80006e2:	7c7a      	ldrb	r2, [r7, #17]
 80006e4:	7cbb      	ldrb	r3, [r7, #18]
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	fa02 f103 	lsl.w	r1, r2, r3
 80006ec:	4a0f      	ldr	r2, [pc, #60]	; (800072c <GPIO_init+0x2e8>)
 80006ee:	7cfb      	ldrb	r3, [r7, #19]
 80006f0:	3302      	adds	r3, #2
 80006f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                EXTI ->IMR |= ( 1 <<pGpioHandler->GPIO_Pin_Conf.PinNum );
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <GPIO_init+0x2d0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	7912      	ldrb	r2, [r2, #4]
 80006fe:	4611      	mov	r1, r2
 8000700:	2201      	movs	r2, #1
 8000702:	408a      	lsls	r2, r1
 8000704:	4611      	mov	r1, r2
 8000706:	4a03      	ldr	r2, [pc, #12]	; (8000714 <GPIO_init+0x2d0>)
 8000708:	430b      	orrs	r3, r1
 800070a:	6013      	str	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40013c00 	.word	0x40013c00
 8000718:	40020000 	.word	0x40020000
 800071c:	40020400 	.word	0x40020400
 8000720:	40020800 	.word	0x40020800
 8000724:	40020c00 	.word	0x40020c00
 8000728:	40023800 	.word	0x40023800
 800072c:	40013800 	.word	0x40013800

08000730 <GPIO_ReadPin>:
*
* @Note              -  none

 */
uint8_t GPIO_ReadPin(GPIO_REGDEF *pGpiox, uint8_t pinNum)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
    uint8_t value;
    value = (uint8_t)(((pGpiox->IDR) >> pinNum) & (BIT_MASK_8));
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	691a      	ldr	r2, [r3, #16]
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	fa22 f303 	lsr.w	r3, r2, r3
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
    return value;
 800074e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <GetFlagStatus>:



/********************get flag status *************************/
uint8_t GetFlagStatus(SPI_REGDEF *pSPI , uint32_t FlagName)
{
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	6039      	str	r1, [r7, #0]
	if(pSPI->SR & FlagName)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	689a      	ldr	r2, [r3, #8]
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	4013      	ands	r3, r2
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <GetFlagStatus+0x1a>
		{
			return FLAG_SET;
 8000770:	2301      	movs	r3, #1
 8000772:	e000      	b.n	8000776 <GetFlagStatus+0x1c>
		}
		return FLAG_RESET;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <SPI_clkCntrl>:
* @Note              -  none

 */

void SPI_clkCntrl(SPI_REGDEF *pSpi  , uint8_t EnOrDsi)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
   if (EnOrDsi == ENABLE)
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d12b      	bne.n	80007ea <SPI_clkCntrl+0x6a>
   {
     if(pSpi == SPI1 )
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a2d      	ldr	r2, [pc, #180]	; (800084c <SPI_clkCntrl+0xcc>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d106      	bne.n	80007a8 <SPI_clkCntrl+0x28>
     {
    	 SPI1_PCLK_EN();
 800079a:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <SPI_clkCntrl+0xd0>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	4a2c      	ldr	r2, [pc, #176]	; (8000850 <SPI_clkCntrl+0xd0>)
 80007a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007a4:	6453      	str	r3, [r2, #68]	; 0x44
     {
    	 SPI4_PCLK_DS();
     }

   }
}
 80007a6:	e04b      	b.n	8000840 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI2 )
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a2a      	ldr	r2, [pc, #168]	; (8000854 <SPI_clkCntrl+0xd4>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d106      	bne.n	80007be <SPI_clkCntrl+0x3e>
    	 SPI2_PCLK_EN();
 80007b0:	4b27      	ldr	r3, [pc, #156]	; (8000850 <SPI_clkCntrl+0xd0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a26      	ldr	r2, [pc, #152]	; (8000850 <SPI_clkCntrl+0xd0>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007bc:	e040      	b.n	8000840 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI3 )
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a25      	ldr	r2, [pc, #148]	; (8000858 <SPI_clkCntrl+0xd8>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d106      	bne.n	80007d4 <SPI_clkCntrl+0x54>
    	 SPI3_PCLK_EN();
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <SPI_clkCntrl+0xd0>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	4a21      	ldr	r2, [pc, #132]	; (8000850 <SPI_clkCntrl+0xd0>)
 80007cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007d2:	e035      	b.n	8000840 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI4 )
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a21      	ldr	r2, [pc, #132]	; (800085c <SPI_clkCntrl+0xdc>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d131      	bne.n	8000840 <SPI_clkCntrl+0xc0>
    	 SPI4_PCLK_EN();
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <SPI_clkCntrl+0xd0>)
 80007de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e0:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <SPI_clkCntrl+0xd0>)
 80007e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007e6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007e8:	e02a      	b.n	8000840 <SPI_clkCntrl+0xc0>
     if(pSpi == SPI1 )
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a17      	ldr	r2, [pc, #92]	; (800084c <SPI_clkCntrl+0xcc>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d106      	bne.n	8000800 <SPI_clkCntrl+0x80>
    	 SPI1_PCLK_DS();
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <SPI_clkCntrl+0xd0>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	4a16      	ldr	r2, [pc, #88]	; (8000850 <SPI_clkCntrl+0xd0>)
 80007f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007fc:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007fe:	e01f      	b.n	8000840 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI2 )
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <SPI_clkCntrl+0xd4>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d106      	bne.n	8000816 <SPI_clkCntrl+0x96>
    	 SPI2_PCLK_DS();
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <SPI_clkCntrl+0xd0>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a10      	ldr	r2, [pc, #64]	; (8000850 <SPI_clkCntrl+0xd0>)
 800080e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000814:	e014      	b.n	8000840 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI3 )
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <SPI_clkCntrl+0xd8>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d106      	bne.n	800082c <SPI_clkCntrl+0xac>
    	 SPI3_PCLK_DS();
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <SPI_clkCntrl+0xd0>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <SPI_clkCntrl+0xd0>)
 8000824:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
}
 800082a:	e009      	b.n	8000840 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI4 )
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <SPI_clkCntrl+0xdc>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d105      	bne.n	8000840 <SPI_clkCntrl+0xc0>
    	 SPI4_PCLK_DS();
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <SPI_clkCntrl+0xd0>)
 8000836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000838:	4a05      	ldr	r2, [pc, #20]	; (8000850 <SPI_clkCntrl+0xd0>)
 800083a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800083e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40013000 	.word	0x40013000
 8000850:	40023800 	.word	0x40023800
 8000854:	40003800 	.word	0x40003800
 8000858:	40003c00 	.word	0x40003c00
 800085c:	40013400 	.word	0x40013400

08000860 <SPI_init>:
* @Note              -  none

 */

void SPI_init(SPI_Handler *pSPI_handler)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

	//peripheral clock enable
	SPI_clkCntrl(pSPI_handler -> pSPI , ENABLE);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2101      	movs	r1, #1
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ff86 	bl	8000780 <SPI_clkCntrl>

  // lets configure the SPI_CR1 register
   uint32_t temp = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
   //1. configure the device mode
   	temp|= (pSPI_handler -> SpiConfig.SPI_DeviceMode << SPI_CR1_MSTR) ;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	791b      	ldrb	r3, [r3, #4]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	461a      	mov	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4313      	orrs	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]

   	//2. Configure the bus config
   if (pSPI_handler -> SpiConfig .SPI_BusConfg == SPI_BUS_CONFIG_FD)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	795b      	ldrb	r3, [r3, #5]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d104      	bne.n	8000898 <SPI_init+0x38>
   {
     // enable unidirectional line
     temp &= ~(1 << SPI_CR1_BIDI_MODE);
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	e014      	b.n	80008c2 <SPI_init+0x62>

   }
  else if (pSPI_handler -> SpiConfig .SPI_BusConfg == SPI_BUS_CONFIG_HD)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	795b      	ldrb	r3, [r3, #5]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d104      	bne.n	80008aa <SPI_init+0x4a>
   {
     // enable bidirectional line
     temp  |= (1 << SPI_CR1_BIDI_MODE);
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e00b      	b.n	80008c2 <SPI_init+0x62>

   }
    else if (pSPI_handler -> SpiConfig .SPI_BusConfg == SPI_BUS_CONFIG_SIMPLEX_RX)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	795b      	ldrb	r3, [r3, #5]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d107      	bne.n	80008c2 <SPI_init+0x62>
   {
      // enabble unidirectional line
     temp &= ~(1 << SPI_CR1_BIDI_MODE);
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008b8:	60fb      	str	r3, [r7, #12]
     // enable recieve only mode
     temp |= (1<< SPI_CR1_RX_ONLY) ;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008c0:	60fb      	str	r3, [r7, #12]

   }

   // configure the clock speed

    temp |= (pSPI_handler -> SpiConfig.SPI_Speed << SPI_CR1_BR);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7a9b      	ldrb	r3, [r3, #10]
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	461a      	mov	r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	60fb      	str	r3, [r7, #12]

   // configure the DFF
   temp |= (pSPI_handler -> SpiConfig.SPI_DFF << SPI_CR1_DFF);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	799b      	ldrb	r3, [r3, #6]
 80008d4:	02db      	lsls	r3, r3, #11
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4313      	orrs	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]

    // configure the CPHA
   temp |= (pSPI_handler -> SpiConfig.SPI_CPHA << SPI_CR1_CPHA);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	79db      	ldrb	r3, [r3, #7]
 80008e2:	461a      	mov	r2, r3
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]

   // configure the CPOL
   temp |= (pSPI_handler -> SpiConfig.SPI_CPOL << SPI_CR1_CPOL);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	7a1b      	ldrb	r3, [r3, #8]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	461a      	mov	r2, r3
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]

   // configure the SSM

  temp |=  pSPI_handler -> SpiConfig.SPI_SSM << SPI_CR1_SSM;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7a5b      	ldrb	r3, [r3, #9]
 80008fc:	025b      	lsls	r3, r3, #9
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4313      	orrs	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]




   // finish the configure
   pSPI_handler -> pSPI -> CR1 = temp ;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	601a      	str	r2, [r3, #0]



}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <SPI_SendData>:
 */



void SPI_SendData(SPI_REGDEF *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b084      	sub	sp, #16
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
	if ( (pSPIx->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f003 0306 	and.w	r3, r3, #6
 800092a:	2b06      	cmp	r3, #6
 800092c:	d02e      	beq.n	800098c <SPI_SendData+0x76>
	  {
	    /* Enable SPI peripheral */
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	601a      	str	r2, [r3, #0]
	  }

	while(Len > 0)
 800093a:	e027      	b.n	800098c <SPI_SendData+0x76>
	{
		//1. wait until TXE is set
		while( (GetFlagStatus(pSPIx,SPI_TXE_FLAG))  == FLAG_RESET );
 800093c:	bf00      	nop
 800093e:	2102      	movs	r1, #2
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f7ff ff0a 	bl	800075a <GetFlagStatus>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0f8      	beq.n	800093e <SPI_SendData+0x28>

		//2. check the DFF bit in CR1
		if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000954:	2b00      	cmp	r3, #0
 8000956:	d00e      	beq.n	8000976 <SPI_SendData+0x60>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	60da      	str	r2, [r3, #12]
			Len--;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3b01      	subs	r3, #1
 8000966:	607b      	str	r3, [r7, #4]
			Len--;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	3301      	adds	r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	e00a      	b.n	800098c <SPI_SendData+0x76>
		}else
		{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	60da      	str	r2, [r3, #12]
			Len--;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	3301      	adds	r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1d4      	bne.n	800093c <SPI_SendData+0x26>
		}
	}

}
 8000992:	bf00      	nop
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <SPI_PeripheralControl>:
{

}

void SPI_PeripheralControl(SPI_REGDEF *pSPIx , uint8_t EnOrDsi)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
	if ( EnOrDsi == ENABLE )
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d106      	bne.n	80009bc <SPI_PeripheralControl+0x20>
	{
		pSPIx -> CR1 |= (1 << SPI_CR1_SPE ) ;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]

	else
	{
		pSPIx -> CR1  &= ~ (1 << SPI_CR1_SPE ) ;
	}
}
 80009ba:	e005      	b.n	80009c8 <SPI_PeripheralControl+0x2c>
		pSPIx -> CR1  &= ~ (1 << SPI_CR1_SPE ) ;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	601a      	str	r2, [r3, #0]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <SPI_ssoe_conf>:
}



void SPI_ssoe_conf(SPI_REGDEF *pSPIx , uint8_t EnOrDsi)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	460b      	mov	r3, r1
 80009dc:	70fb      	strb	r3, [r7, #3]
	if ( EnOrDsi == ENABLE )
 80009de:	78fb      	ldrb	r3, [r7, #3]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d106      	bne.n	80009f2 <SPI_ssoe_conf+0x20>
		{
			pSPIx -> CR2 |= (1 << SPI_CR2_SSOE ) ;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f043 0204 	orr.w	r2, r3, #4
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	605a      	str	r2, [r3, #4]

		else
		{
			pSPIx -> CR2  &= ~ (1 << SPI_CR2_SSOE  ) ;
		}
}
 80009f0:	e005      	b.n	80009fe <SPI_ssoe_conf+0x2c>
			pSPIx -> CR2  &= ~ (1 << SPI_CR2_SSOE  ) ;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f023 0204 	bic.w	r2, r3, #4
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	605a      	str	r2, [r3, #4]
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a0c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a12:	490d      	ldr	r1, [pc, #52]	; (8000a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <LoopForever+0xe>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a28:	4c0a      	ldr	r4, [pc, #40]	; (8000a54 <LoopForever+0x16>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a36:	f000 f811 	bl	8000a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3a:	f7ff fc47 	bl	80002cc <main>

08000a3e <LoopForever>:

LoopForever:
  b LoopForever
 8000a3e:	e7fe      	b.n	8000a3e <LoopForever>
  ldr   r0, =_estack
 8000a40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a4c:	08000bac 	.word	0x08000bac
  ldr r2, =_sbss
 8000a50:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a54:	2000001c 	.word	0x2000001c

08000a58 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC_IRQHandler>
	...

08000a5c <__libc_init_array>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	4d0d      	ldr	r5, [pc, #52]	; (8000a94 <__libc_init_array+0x38>)
 8000a60:	4c0d      	ldr	r4, [pc, #52]	; (8000a98 <__libc_init_array+0x3c>)
 8000a62:	1b64      	subs	r4, r4, r5
 8000a64:	10a4      	asrs	r4, r4, #2
 8000a66:	2600      	movs	r6, #0
 8000a68:	42a6      	cmp	r6, r4
 8000a6a:	d109      	bne.n	8000a80 <__libc_init_array+0x24>
 8000a6c:	4d0b      	ldr	r5, [pc, #44]	; (8000a9c <__libc_init_array+0x40>)
 8000a6e:	4c0c      	ldr	r4, [pc, #48]	; (8000aa0 <__libc_init_array+0x44>)
 8000a70:	f000 f826 	bl	8000ac0 <_init>
 8000a74:	1b64      	subs	r4, r4, r5
 8000a76:	10a4      	asrs	r4, r4, #2
 8000a78:	2600      	movs	r6, #0
 8000a7a:	42a6      	cmp	r6, r4
 8000a7c:	d105      	bne.n	8000a8a <__libc_init_array+0x2e>
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a84:	4798      	blx	r3
 8000a86:	3601      	adds	r6, #1
 8000a88:	e7ee      	b.n	8000a68 <__libc_init_array+0xc>
 8000a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a8e:	4798      	blx	r3
 8000a90:	3601      	adds	r6, #1
 8000a92:	e7f2      	b.n	8000a7a <__libc_init_array+0x1e>
 8000a94:	08000ba4 	.word	0x08000ba4
 8000a98:	08000ba4 	.word	0x08000ba4
 8000a9c:	08000ba4 	.word	0x08000ba4
 8000aa0:	08000ba8 	.word	0x08000ba8

08000aa4 <memcpy>:
 8000aa4:	440a      	add	r2, r1
 8000aa6:	4291      	cmp	r1, r2
 8000aa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aac:	d100      	bne.n	8000ab0 <memcpy+0xc>
 8000aae:	4770      	bx	lr
 8000ab0:	b510      	push	{r4, lr}
 8000ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000aba:	4291      	cmp	r1, r2
 8000abc:	d1f9      	bne.n	8000ab2 <memcpy+0xe>
 8000abe:	bd10      	pop	{r4, pc}

08000ac0 <_init>:
 8000ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac2:	bf00      	nop
 8000ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ac6:	bc08      	pop	{r3}
 8000ac8:	469e      	mov	lr, r3
 8000aca:	4770      	bx	lr

08000acc <_fini>:
 8000acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ace:	bf00      	nop
 8000ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad2:	bc08      	pop	{r3}
 8000ad4:	469e      	mov	lr, r3
 8000ad6:	4770      	bx	lr
