
spi_f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ea0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001034  0800103c  0001103c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001034  08001034  0001103c  2**0
                  CONTENTS
  4 .ARM          00000000  08001034  08001034  0001103c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001034  0800103c  0001103c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001034  08001034  00011034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001038  08001038  00011038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001103c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000000  0800103c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  0800103c  00020238  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0001103c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00011066  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001735  00000000  00000000  000110a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005d5  00000000  00000000  000127de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d0  00000000  00000000  00012db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000156  00000000  00000000  00012f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002509  00000000  00000000  000130de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001bb9  00000000  00000000  000155e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009a71  00000000  00000000  000171a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000710  00000000  00000000  00020c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00021324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800101c 	.word	0x0800101c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800101c 	.word	0x0800101c

080001d4 <SPI2_GPIOInits>:
volatile char ReadByte;
volatile uint8_t rcvStop = 0;
/*This flag will be set in the interrupt handler of the Arduino interrupt GPIO */
volatile uint8_t dataAvailable = 0;
void SPI2_GPIOInits(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
	GPIO_Handler SPIPins;

	SPIPins.GPIOX = GPIOB;
 80001da:	4b14      	ldr	r3, [pc, #80]	; (800022c <SPI2_GPIOInits+0x58>)
 80001dc:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_Pin_Conf.PinMode  = GPIO_MODE_ALTFN;
 80001de:	2302      	movs	r3, #2
 80001e0:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_Pin_Conf.PinAltFn = 5;
 80001e2:	2305      	movs	r3, #5
 80001e4:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_Pin_Conf.PinOPTYP = GPIO_OUTYPE_PP;
 80001e6:	2300      	movs	r3, #0
 80001e8:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_Pin_Conf.PinPUPDR = GPIO_PUPD_NO;
 80001ea:	2300      	movs	r3, #0
 80001ec:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_Pin_Conf.PinSpeed = GPIO_PINSPEED_HIGH;
 80001ee:	2302      	movs	r3, #2
 80001f0:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_Pin_Conf.PinNum = GPIO_PIN_13;
 80001f2:	230d      	movs	r3, #13
 80001f4:	723b      	strb	r3, [r7, #8]
	GPIO_init(&SPIPins);
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 f975 	bl	80004e8 <GPIO_init>

	//MOSI
	SPIPins.GPIO_Pin_Conf.PinNum  = GPIO_PIN_15;
 80001fe:	230f      	movs	r3, #15
 8000200:	723b      	strb	r3, [r7, #8]
	GPIO_init(&SPIPins);
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	4618      	mov	r0, r3
 8000206:	f000 f96f 	bl	80004e8 <GPIO_init>


	//MISO
	SPIPins.GPIO_Pin_Conf.PinNum  = GPIO_PIN_14;
 800020a:	230e      	movs	r3, #14
 800020c:	723b      	strb	r3, [r7, #8]
		GPIO_init(&SPIPins);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f969 	bl	80004e8 <GPIO_init>


	//NSS
	SPIPins.GPIO_Pin_Conf.PinNum = GPIO_PIN_12;
 8000216:	230c      	movs	r3, #12
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_init(&SPIPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f963 	bl	80004e8 <GPIO_init>

}
 8000222:	bf00      	nop
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40020400 	.word	0x40020400

08000230 <SPI2_Inits>:
void SPI2_Inits(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b088      	sub	sp, #32
 8000234:	af00      	add	r7, sp, #0

	SPI_Handler SPI2handle;

	SPI2handle.pSPI = SPI2;
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <SPI2_Inits+0x38>)
 8000238:	603b      	str	r3, [r7, #0]
	SPI2handle.SpiConfig.SPI_BusConfg = SPI_BUS_CONFIG_FD;
 800023a:	2301      	movs	r3, #1
 800023c:	717b      	strb	r3, [r7, #5]
	SPI2handle.SpiConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800023e:	2301      	movs	r3, #1
 8000240:	713b      	strb	r3, [r7, #4]
	SPI2handle.SpiConfig.SPI_Speed = SPI_SPEED_DIV32;
 8000242:	2304      	movs	r3, #4
 8000244:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SpiConfig.SPI_DFF = SPI_DFF_8_BITS;
 8000246:	2300      	movs	r3, #0
 8000248:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SpiConfig.SPI_CPOL = SPI_CPOL_LOW;
 800024a:	2300      	movs	r3, #0
 800024c:	723b      	strb	r3, [r7, #8]
	SPI2handle.SpiConfig.SPI_CPHA = SPI_CPHA_LOW;
 800024e:	2300      	movs	r3, #0
 8000250:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SpiConfig.SPI_SSM = SPI_SSM_DS; //Hardware slave management enabled for NSS pin
 8000252:	2300      	movs	r3, #0
 8000254:	727b      	strb	r3, [r7, #9]

	SPI_init(&SPI2handle);
 8000256:	463b      	mov	r3, r7
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fc13 	bl	8000a84 <SPI_init>
}
 800025e:	bf00      	nop
 8000260:	3720      	adds	r7, #32
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40003800 	.word	0x40003800

0800026c <Slave_GPIO_InterruptPinInit>:
void Slave_GPIO_InterruptPinInit(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
	     GPIO_Handler spiIntPin;
		memset(&spiIntPin,0,sizeof(spiIntPin));
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	220c      	movs	r2, #12
 8000276:	2100      	movs	r1, #0
 8000278:	4618      	mov	r0, r3
 800027a:	f000 fea2 	bl	8000fc2 <memset>

		//this is led gpio configuration
		spiIntPin.GPIOX = GPIOD;
 800027e:	4b0d      	ldr	r3, [pc, #52]	; (80002b4 <Slave_GPIO_InterruptPinInit+0x48>)
 8000280:	607b      	str	r3, [r7, #4]
		spiIntPin.GPIO_Pin_Conf.PinNum  = GPIO_PIN_2 ;
 8000282:	2302      	movs	r3, #2
 8000284:	723b      	strb	r3, [r7, #8]
		spiIntPin.GPIO_Pin_Conf.PinMode = GPIO_MODE_IT_FT;
 8000286:	2304      	movs	r3, #4
 8000288:	727b      	strb	r3, [r7, #9]
		spiIntPin.GPIO_Pin_Conf.PinSpeed= GPIO_PINSPEED_LOW;
 800028a:	2300      	movs	r3, #0
 800028c:	72bb      	strb	r3, [r7, #10]
		spiIntPin.GPIO_Pin_Conf.PinPUPDR= GPIO_PUPD_PU;
 800028e:	2301      	movs	r3, #1
 8000290:	72fb      	strb	r3, [r7, #11]

		GPIO_init(&spiIntPin);
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f927 	bl	80004e8 <GPIO_init>

		GPIO_PriorityConf(IRQ_NUM_EXTI2, IRQ_PRIORITY_15);
 800029a:	210f      	movs	r1, #15
 800029c:	2008      	movs	r0, #8
 800029e:	f000 fb1d 	bl	80008dc <GPIO_PriorityConf>
		GPIO_IRQconf(IRQ_NUM_EXTI2, ENABLE);
 80002a2:	2101      	movs	r1, #1
 80002a4:	2008      	movs	r0, #8
 80002a6:	f000 fa95 	bl	80007d4 <GPIO_IRQconf>

}
 80002aa:	bf00      	nop
 80002ac:	3710      	adds	r7, #16
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40020c00 	.word	0x40020c00

080002b8 <main>:

	}
}

int main(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xff;
 80002be:	23ff      	movs	r3, #255	; 0xff
 80002c0:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 80002c2:	f7ff ffd3 	bl	800026c <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80002c6:	f7ff ff85 	bl	80001d4 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80002ca:	f7ff ffb1 	bl	8000230 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_ssoe_conf(SPI2,ENABLE);
 80002ce:	2101      	movs	r1, #1
 80002d0:	4822      	ldr	r0, [pc, #136]	; (800035c <main+0xa4>)
 80002d2:	f000 fd1d 	bl	8000d10 <SPI_ssoe_conf>

	SPI_IRQconf(IRQ_NUM_SPI2, ENABLE);
 80002d6:	2101      	movs	r1, #1
 80002d8:	2024      	movs	r0, #36	; 0x24
 80002da:	f000 fc2f 	bl	8000b3c <SPI_IRQconf>

while(1)

{
	rcvStop = 0;
 80002de:	4b20      	ldr	r3, [pc, #128]	; (8000360 <main+0xa8>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	701a      	strb	r2, [r3, #0]

	while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 80002e4:	bf00      	nop
 80002e6:	4b1f      	ldr	r3, [pc, #124]	; (8000364 <main+0xac>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d0fa      	beq.n	80002e6 <main+0x2e>

	GPIO_IRQconf(IRQ_NUM_EXTI2,DISABLE);
 80002f0:	2100      	movs	r1, #0
 80002f2:	2008      	movs	r0, #8
 80002f4:	f000 fa6e 	bl	80007d4 <GPIO_IRQconf>

	//enable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 80002f8:	2101      	movs	r1, #1
 80002fa:	4818      	ldr	r0, [pc, #96]	; (800035c <main+0xa4>)
 80002fc:	f000 fced 	bl	8000cda <SPI_PeripheralControl>


	while(!rcvStop)
 8000300:	e012      	b.n	8000328 <main+0x70>
	{
		/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
		while ( SPI_SendDataIT(&SPI2handle,&dummy,1) == SPI_BSY_TX);
 8000302:	bf00      	nop
 8000304:	1dfb      	adds	r3, r7, #7
 8000306:	2201      	movs	r2, #1
 8000308:	4619      	mov	r1, r3
 800030a:	4817      	ldr	r0, [pc, #92]	; (8000368 <main+0xb0>)
 800030c:	f000 fd1b 	bl	8000d46 <SPI_SendDataIT>
 8000310:	4603      	mov	r3, r0
 8000312:	2b02      	cmp	r3, #2
 8000314:	d0f6      	beq.n	8000304 <main+0x4c>
		while ( SPI_RecieveIT(&SPI2handle,&ReadByte,1) == SPI_BSY_RX );
 8000316:	bf00      	nop
 8000318:	2201      	movs	r2, #1
 800031a:	4914      	ldr	r1, [pc, #80]	; (800036c <main+0xb4>)
 800031c:	4812      	ldr	r0, [pc, #72]	; (8000368 <main+0xb0>)
 800031e:	f000 fd35 	bl	8000d8c <SPI_RecieveIT>
 8000322:	4603      	mov	r3, r0
 8000324:	2b01      	cmp	r3, #1
 8000326:	d0f7      	beq.n	8000318 <main+0x60>
	while(!rcvStop)
 8000328:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <main+0xa8>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0e7      	beq.n	8000302 <main+0x4a>
	}

	// confirm SPI is not busy
	while( GetFlagStatus(SPI2,SPI_BSY_FLAG) );
 8000332:	bf00      	nop
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	4809      	ldr	r0, [pc, #36]	; (800035c <main+0xa4>)
 8000338:	f000 fb20 	bl	800097c <GetFlagStatus>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d1f8      	bne.n	8000334 <main+0x7c>

	//Disable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,DISABLE);
 8000342:	2100      	movs	r1, #0
 8000344:	4805      	ldr	r0, [pc, #20]	; (800035c <main+0xa4>)
 8000346:	f000 fcc8 	bl	8000cda <SPI_PeripheralControl>

	dataAvailable = 0;
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <main+0xac>)
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]

	GPIO_IRQconf(IRQ_NUM_EXTI2,ENABLE);
 8000350:	2101      	movs	r1, #1
 8000352:	2008      	movs	r0, #8
 8000354:	f000 fa3e 	bl	80007d4 <GPIO_IRQconf>
	rcvStop = 0;
 8000358:	e7c1      	b.n	80002de <main+0x26>
 800035a:	bf00      	nop
 800035c:	40003800 	.word	0x40003800
 8000360:	20000231 	.word	0x20000231
 8000364:	20000232 	.word	0x20000232
 8000368:	2000001c 	.word	0x2000001c
 800036c:	20000230 	.word	0x20000230

08000370 <SPI2_IRQHandler>:
return 0 ;

}

void SPI2_IRQHandler(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0

	SPI_IRQ_Handle(&SPI2handle);
 8000374:	4802      	ldr	r0, [pc, #8]	; (8000380 <SPI2_IRQHandler+0x10>)
 8000376:	f000 fc63 	bl	8000c40 <SPI_IRQ_Handle>
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	2000001c 	.word	0x2000001c

08000384 <SPI_ApplicationEventCallback>:
void SPI_ApplicationEventCallback(SPI_Handler *pSPIHandle,uint8_t AppEv)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_CMPLT)
 8000390:	78fb      	ldrb	r3, [r7, #3]
 8000392:	2b02      	cmp	r3, #2
 8000394:	d11f      	bne.n	80003d6 <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <SPI_ApplicationEventCallback+0x5c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	1c5a      	adds	r2, r3, #1
 800039c:	4910      	ldr	r1, [pc, #64]	; (80003e0 <SPI_ApplicationEventCallback+0x5c>)
 800039e:	600a      	str	r2, [r1, #0]
 80003a0:	4a10      	ldr	r2, [pc, #64]	; (80003e4 <SPI_ApplicationEventCallback+0x60>)
 80003a2:	7812      	ldrb	r2, [r2, #0]
 80003a4:	b2d1      	uxtb	r1, r2
 80003a6:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <SPI_ApplicationEventCallback+0x64>)
 80003a8:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <SPI_ApplicationEventCallback+0x60>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d004      	beq.n	80003be <SPI_ApplicationEventCallback+0x3a>
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <SPI_ApplicationEventCallback+0x5c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80003bc:	d10b      	bne.n	80003d6 <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1;
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <SPI_ApplicationEventCallback+0x68>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <SPI_ApplicationEventCallback+0x5c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	3b01      	subs	r3, #1
 80003ca:	4a07      	ldr	r2, [pc, #28]	; (80003e8 <SPI_ApplicationEventCallback+0x64>)
 80003cc:	2100      	movs	r1, #0
 80003ce:	54d1      	strb	r1, [r2, r3]
					i = 0;
 80003d0:	4b03      	ldr	r3, [pc, #12]	; (80003e0 <SPI_ApplicationEventCallback+0x5c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
				}
	}

}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	20000234 	.word	0x20000234
 80003e4:	20000230 	.word	0x20000230
 80003e8:	2000003c 	.word	0x2000003c
 80003ec:	20000231 	.word	0x20000231

080003f0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	GPIO_IRQ_Handle(GPIO_PIN_2);
 80003f4:	2002      	movs	r0, #2
 80003f6:	f000 faa1 	bl	800093c <GPIO_IRQ_Handle>
	dataAvailable = 1;
 80003fa:	4b02      	ldr	r3, [pc, #8]	; (8000404 <EXTI2_IRQHandler+0x14>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	701a      	strb	r2, [r3, #0]
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000232 	.word	0x20000232

08000408 <GPIO_clkCntrl>:
*
* @Note              -  none

 */
void GPIO_clkCntrl(GPIO_REGDEF *pGpio, uint8_t EnOrDsi)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	460b      	mov	r3, r1
 8000412:	70fb      	strb	r3, [r7, #3]
    if (EnOrDsi == ENABLE)
 8000414:	78fb      	ldrb	r3, [r7, #3]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d12b      	bne.n	8000472 <GPIO_clkCntrl+0x6a>
    {
        if (pGpio == GPIOA)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a2d      	ldr	r2, [pc, #180]	; (80004d4 <GPIO_clkCntrl+0xcc>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_clkCntrl+0x28>
        {
            GPIOA_PCLK_EN;
 8000422:	4b2d      	ldr	r3, [pc, #180]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000426:	4a2c      	ldr	r2, [pc, #176]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6313      	str	r3, [r2, #48]	; 0x30
        else if (pGpio == GPIOD)
        {
            GPIOD_PCLK_DS;
        }
    }
}
 800042e:	e04b      	b.n	80004c8 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOB)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a2a      	ldr	r2, [pc, #168]	; (80004dc <GPIO_clkCntrl+0xd4>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_clkCntrl+0x3e>
            GPIOB_PCLK_EN;
 8000438:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043c:	4a26      	ldr	r2, [pc, #152]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 800043e:	f043 0302 	orr.w	r3, r3, #2
 8000442:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000444:	e040      	b.n	80004c8 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOC)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a25      	ldr	r2, [pc, #148]	; (80004e0 <GPIO_clkCntrl+0xd8>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_clkCntrl+0x54>
            GPIOC_PCLK_EN;
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	4a21      	ldr	r2, [pc, #132]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 8000454:	f043 0304 	orr.w	r3, r3, #4
 8000458:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045a:	e035      	b.n	80004c8 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOD)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a21      	ldr	r2, [pc, #132]	; (80004e4 <GPIO_clkCntrl+0xdc>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d131      	bne.n	80004c8 <GPIO_clkCntrl+0xc0>
            GPIOD_PCLK_EN;
 8000464:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000468:	4a1b      	ldr	r2, [pc, #108]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 800046a:	f043 0308 	orr.w	r3, r3, #8
 800046e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000470:	e02a      	b.n	80004c8 <GPIO_clkCntrl+0xc0>
        if (pGpio == GPIOA)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a17      	ldr	r2, [pc, #92]	; (80004d4 <GPIO_clkCntrl+0xcc>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <GPIO_clkCntrl+0x80>
            GPIOA_PCLK_DS;
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047e:	4a16      	ldr	r2, [pc, #88]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 8000480:	f023 0301 	bic.w	r3, r3, #1
 8000484:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000486:	e01f      	b.n	80004c8 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOB)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a14      	ldr	r2, [pc, #80]	; (80004dc <GPIO_clkCntrl+0xd4>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <GPIO_clkCntrl+0x96>
            GPIOB_PCLK_DS;
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	4a10      	ldr	r2, [pc, #64]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 8000496:	f023 0302 	bic.w	r3, r3, #2
 800049a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049c:	e014      	b.n	80004c8 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOC)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a0f      	ldr	r2, [pc, #60]	; (80004e0 <GPIO_clkCntrl+0xd8>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_clkCntrl+0xac>
            GPIOC_PCLK_DS;
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004aa:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 80004ac:	f023 0304 	bic.w	r3, r3, #4
 80004b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b2:	e009      	b.n	80004c8 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOD)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <GPIO_clkCntrl+0xdc>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d105      	bne.n	80004c8 <GPIO_clkCntrl+0xc0>
            GPIOD_PCLK_DS;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	4a05      	ldr	r2, [pc, #20]	; (80004d8 <GPIO_clkCntrl+0xd0>)
 80004c2:	f023 0308 	bic.w	r3, r3, #8
 80004c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40020000 	.word	0x40020000
 80004d8:	40023800 	.word	0x40023800
 80004dc:	40020400 	.word	0x40020400
 80004e0:	40020800 	.word	0x40020800
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <GPIO_init>:
* @Note              -  none

 */
void GPIO_init(GPIO_Handler *pGpioHandler)

{ // pin number
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	 GPIO_clkCntrl(pGpioHandler ->GPIOX, ENABLE);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2101      	movs	r1, #1
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ff86 	bl	8000408 <GPIO_clkCntrl>
	 uint32_t temp =0 ;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]
    if (pGpioHandler->GPIO_Pin_Conf.PinMode <= GPIO_MODE_ANALOG)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	795b      	ldrb	r3, [r3, #5]
 8000504:	2b03      	cmp	r3, #3
 8000506:	f200 80bf 	bhi.w	8000688 <GPIO_init+0x1a0>
    {
        // pin mode

        temp |= ((pGpioHandler->GPIO_Pin_Conf.PinMode) << (2 * (pGpioHandler->GPIO_Pin_Conf.PinNum)));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	795b      	ldrb	r3, [r3, #5]
 800050e:	461a      	mov	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	fa02 f303 	lsl.w	r3, r2, r3
 800051a:	461a      	mov	r2, r3
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	4313      	orrs	r3, r2
 8000520:	617b      	str	r3, [r7, #20]
        pGpioHandler->GPIOX->MODER &= ~((0x3) << (pGpioHandler->GPIO_Pin_Conf.PinNum));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	4619      	mov	r1, r3
 800052e:	2303      	movs	r3, #3
 8000530:	408b      	lsls	r3, r1
 8000532:	43db      	mvns	r3, r3
 8000534:	4619      	mov	r1, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	400a      	ands	r2, r1
 800053c:	601a      	str	r2, [r3, #0]
        pGpioHandler->GPIOX->MODER |= temp;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	6819      	ldr	r1, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	430a      	orrs	r2, r1
 800054c:	601a      	str	r2, [r3, #0]

        // pin speed
        temp |= ((pGpioHandler->GPIO_Pin_Conf.PinSpeed) << (2 * (pGpioHandler->GPIO_Pin_Conf.PinNum)));
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	799b      	ldrb	r3, [r3, #6]
 8000552:	461a      	mov	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	791b      	ldrb	r3, [r3, #4]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	fa02 f303 	lsl.w	r3, r2, r3
 800055e:	461a      	mov	r2, r3
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	4313      	orrs	r3, r2
 8000564:	617b      	str	r3, [r7, #20]
        pGpioHandler->GPIOX->OSPEEDR &= ~((0x3) << (pGpioHandler->GPIO_Pin_Conf.PinNum));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	689a      	ldr	r2, [r3, #8]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	791b      	ldrb	r3, [r3, #4]
 8000570:	4619      	mov	r1, r3
 8000572:	2303      	movs	r3, #3
 8000574:	408b      	lsls	r3, r1
 8000576:	43db      	mvns	r3, r3
 8000578:	4619      	mov	r1, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	400a      	ands	r2, r1
 8000580:	609a      	str	r2, [r3, #8]
        pGpioHandler->GPIOX->OSPEEDR |= temp;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	6899      	ldr	r1, [r3, #8]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	430a      	orrs	r2, r1
 8000590:	609a      	str	r2, [r3, #8]

        // pin pupd control

        temp |= ((pGpioHandler->GPIO_Pin_Conf.PinPUPDR) << (2 * (pGpioHandler->GPIO_Pin_Conf.PinNum)));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	79db      	ldrb	r3, [r3, #7]
 8000596:	461a      	mov	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	461a      	mov	r2, r3
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	617b      	str	r3, [r7, #20]
        pGpioHandler->GPIOX->PUPDR &= ~((0x3) << (2 * pGpioHandler->GPIO_Pin_Conf.PinNum));
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	68da      	ldr	r2, [r3, #12]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	791b      	ldrb	r3, [r3, #4]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	2103      	movs	r1, #3
 80005b8:	fa01 f303 	lsl.w	r3, r1, r3
 80005bc:	43db      	mvns	r3, r3
 80005be:	4619      	mov	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	400a      	ands	r2, r1
 80005c6:	60da      	str	r2, [r3, #12]
        pGpioHandler->GPIOX->PUPDR |= temp;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	68d9      	ldr	r1, [r3, #12]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	697a      	ldr	r2, [r7, #20]
 80005d4:	430a      	orrs	r2, r1
 80005d6:	60da      	str	r2, [r3, #12]

        // pin otype control

        temp |= ((pGpioHandler->GPIO_Pin_Conf.PinOPTYP) << ((pGpioHandler->GPIO_Pin_Conf.PinNum)));
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	7a1b      	ldrb	r3, [r3, #8]
 80005dc:	461a      	mov	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	617b      	str	r3, [r7, #20]
        pGpioHandler->GPIOX->OTYPER &= ~((0x3) << (pGpioHandler->GPIO_Pin_Conf.PinNum));
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	685a      	ldr	r2, [r3, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	791b      	ldrb	r3, [r3, #4]
 80005f8:	4619      	mov	r1, r3
 80005fa:	2303      	movs	r3, #3
 80005fc:	408b      	lsls	r3, r1
 80005fe:	43db      	mvns	r3, r3
 8000600:	4619      	mov	r1, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	400a      	ands	r2, r1
 8000608:	605a      	str	r2, [r3, #4]
        pGpioHandler->GPIOX->OTYPER |= temp;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	6859      	ldr	r1, [r3, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	430a      	orrs	r2, r1
 8000618:	605a      	str	r2, [r3, #4]

        // pin alternate fn  control
        if ((pGpioHandler->GPIO_Pin_Conf.PinMode) == GPIO_MODE_ALTFN)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	795b      	ldrb	r3, [r3, #5]
 800061e:	2b02      	cmp	r3, #2
 8000620:	f040 80c6 	bne.w	80007b0 <GPIO_init+0x2c8>
        {
            // config for the alt fn
            uint8_t temp1, temp2;
            temp1 = (pGpioHandler->GPIO_Pin_Conf.PinNum) / 8;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	743b      	strb	r3, [r7, #16]
            temp2 = (pGpioHandler->GPIO_Pin_Conf.PinNum) % 8;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	f003 0307 	and.w	r3, r3, #7
 8000634:	73fb      	strb	r3, [r7, #15]
            pGpioHandler->GPIOX->AFR[temp1] &= ~((0xF) << (temp2));
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	7c3a      	ldrb	r2, [r7, #16]
 800063c:	3208      	adds	r2, #8
 800063e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	220f      	movs	r2, #15
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	43db      	mvns	r3, r3
 800064c:	4618      	mov	r0, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	7c3a      	ldrb	r2, [r7, #16]
 8000654:	4001      	ands	r1, r0
 8000656:	3208      	adds	r2, #8
 8000658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            pGpioHandler->GPIOX->AFR[temp1] |= ((pGpioHandler->GPIO_Pin_Conf.PinAltFn) << (4 * (temp2)));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	7c3a      	ldrb	r2, [r7, #16]
 8000662:	3208      	adds	r2, #8
 8000664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	7a5b      	ldrb	r3, [r3, #9]
 800066c:	461a      	mov	r2, r3
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	4618      	mov	r0, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	7c3a      	ldrb	r2, [r7, #16]
 800067e:	4301      	orrs	r1, r0
 8000680:	3208      	adds	r2, #8
 8000682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                // ENABLE INTERRUPT DELIVERY
                EXTI ->IMR |= ( 1 <<pGpioHandler->GPIO_Pin_Conf.PinNum );


        }
}
 8000686:	e093      	b.n	80007b0 <GPIO_init+0x2c8>
            if (pGpioHandler->GPIO_Pin_Conf.PinMode == GPIO_MODE_IT_FT )
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	795b      	ldrb	r3, [r3, #5]
 800068c:	2b04      	cmp	r3, #4
 800068e:	d117      	bne.n	80006c0 <GPIO_init+0x1d8>
                EXTI ->FTSR |= (1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 8000690:	4b49      	ldr	r3, [pc, #292]	; (80007b8 <GPIO_init+0x2d0>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	7912      	ldrb	r2, [r2, #4]
 8000698:	4611      	mov	r1, r2
 800069a:	2201      	movs	r2, #1
 800069c:	408a      	lsls	r2, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	4a45      	ldr	r2, [pc, #276]	; (80007b8 <GPIO_init+0x2d0>)
 80006a2:	430b      	orrs	r3, r1
 80006a4:	60d3      	str	r3, [r2, #12]
                EXTI ->RTSR &= ~(1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 80006a6:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <GPIO_init+0x2d0>)
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	7912      	ldrb	r2, [r2, #4]
 80006ae:	4611      	mov	r1, r2
 80006b0:	2201      	movs	r2, #1
 80006b2:	408a      	lsls	r2, r1
 80006b4:	43d2      	mvns	r2, r2
 80006b6:	4611      	mov	r1, r2
 80006b8:	4a3f      	ldr	r2, [pc, #252]	; (80007b8 <GPIO_init+0x2d0>)
 80006ba:	400b      	ands	r3, r1
 80006bc:	6093      	str	r3, [r2, #8]
 80006be:	e035      	b.n	800072c <GPIO_init+0x244>
            else if (pGpioHandler->GPIO_Pin_Conf.PinMode == GPIO_MODE_IT_RT)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	795b      	ldrb	r3, [r3, #5]
 80006c4:	2b05      	cmp	r3, #5
 80006c6:	d117      	bne.n	80006f8 <GPIO_init+0x210>
                EXTI ->RTSR |= (1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 80006c8:	4b3b      	ldr	r3, [pc, #236]	; (80007b8 <GPIO_init+0x2d0>)
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	7912      	ldrb	r2, [r2, #4]
 80006d0:	4611      	mov	r1, r2
 80006d2:	2201      	movs	r2, #1
 80006d4:	408a      	lsls	r2, r1
 80006d6:	4611      	mov	r1, r2
 80006d8:	4a37      	ldr	r2, [pc, #220]	; (80007b8 <GPIO_init+0x2d0>)
 80006da:	430b      	orrs	r3, r1
 80006dc:	6093      	str	r3, [r2, #8]
                EXTI ->FTSR &= ~(1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 80006de:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <GPIO_init+0x2d0>)
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	7912      	ldrb	r2, [r2, #4]
 80006e6:	4611      	mov	r1, r2
 80006e8:	2201      	movs	r2, #1
 80006ea:	408a      	lsls	r2, r1
 80006ec:	43d2      	mvns	r2, r2
 80006ee:	4611      	mov	r1, r2
 80006f0:	4a31      	ldr	r2, [pc, #196]	; (80007b8 <GPIO_init+0x2d0>)
 80006f2:	400b      	ands	r3, r1
 80006f4:	60d3      	str	r3, [r2, #12]
 80006f6:	e019      	b.n	800072c <GPIO_init+0x244>
            else if (pGpioHandler->GPIO_Pin_Conf.PinMode == GPIO_MODE_IT_RFT)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	795b      	ldrb	r3, [r3, #5]
 80006fc:	2b06      	cmp	r3, #6
 80006fe:	d115      	bne.n	800072c <GPIO_init+0x244>
                EXTI ->RTSR |=  (1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 8000700:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <GPIO_init+0x2d0>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	7912      	ldrb	r2, [r2, #4]
 8000708:	4611      	mov	r1, r2
 800070a:	2201      	movs	r2, #1
 800070c:	408a      	lsls	r2, r1
 800070e:	4611      	mov	r1, r2
 8000710:	4a29      	ldr	r2, [pc, #164]	; (80007b8 <GPIO_init+0x2d0>)
 8000712:	430b      	orrs	r3, r1
 8000714:	6093      	str	r3, [r2, #8]
                EXTI ->FTSR |=  (1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <GPIO_init+0x2d0>)
 8000718:	68db      	ldr	r3, [r3, #12]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	7912      	ldrb	r2, [r2, #4]
 800071e:	4611      	mov	r1, r2
 8000720:	2201      	movs	r2, #1
 8000722:	408a      	lsls	r2, r1
 8000724:	4611      	mov	r1, r2
 8000726:	4a24      	ldr	r2, [pc, #144]	; (80007b8 <GPIO_init+0x2d0>)
 8000728:	430b      	orrs	r3, r1
 800072a:	60d3      	str	r3, [r2, #12]
                uint8_t temp4  =pGpioHandler->GPIO_Pin_Conf.PinNum / 4;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	089b      	lsrs	r3, r3, #2
 8000732:	74fb      	strb	r3, [r7, #19]
                uint8_t temp5 =pGpioHandler->GPIO_Pin_Conf.PinNum % 4;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	f003 0303 	and.w	r3, r3, #3
 800073c:	74bb      	strb	r3, [r7, #18]
                uint8_t pinCode = GPIO_BASE_CODE(pGpioHandler->GPIOX) ;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a1e      	ldr	r2, [pc, #120]	; (80007bc <GPIO_init+0x2d4>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d016      	beq.n	8000776 <GPIO_init+0x28e>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <GPIO_init+0x2d8>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d00f      	beq.n	8000772 <GPIO_init+0x28a>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <GPIO_init+0x2dc>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d008      	beq.n	800076e <GPIO_init+0x286>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a19      	ldr	r2, [pc, #100]	; (80007c8 <GPIO_init+0x2e0>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d101      	bne.n	800076a <GPIO_init+0x282>
 8000766:	2303      	movs	r3, #3
 8000768:	e006      	b.n	8000778 <GPIO_init+0x290>
 800076a:	2300      	movs	r3, #0
 800076c:	e004      	b.n	8000778 <GPIO_init+0x290>
 800076e:	2302      	movs	r3, #2
 8000770:	e002      	b.n	8000778 <GPIO_init+0x290>
 8000772:	2301      	movs	r3, #1
 8000774:	e000      	b.n	8000778 <GPIO_init+0x290>
 8000776:	2300      	movs	r3, #0
 8000778:	747b      	strb	r3, [r7, #17]
                SYSCFG_PCLK_EN;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <GPIO_init+0x2e4>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <GPIO_init+0x2e4>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000784:	6453      	str	r3, [r2, #68]	; 0x44
                SYSCFG -> EXTICR[temp4] = (pinCode << temp5 * 4 );
 8000786:	7c7a      	ldrb	r2, [r7, #17]
 8000788:	7cbb      	ldrb	r3, [r7, #18]
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	fa02 f103 	lsl.w	r1, r2, r3
 8000790:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <GPIO_init+0x2e8>)
 8000792:	7cfb      	ldrb	r3, [r7, #19]
 8000794:	3302      	adds	r3, #2
 8000796:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                EXTI ->IMR |= ( 1 <<pGpioHandler->GPIO_Pin_Conf.PinNum );
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <GPIO_init+0x2d0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	7912      	ldrb	r2, [r2, #4]
 80007a2:	4611      	mov	r1, r2
 80007a4:	2201      	movs	r2, #1
 80007a6:	408a      	lsls	r2, r1
 80007a8:	4611      	mov	r1, r2
 80007aa:	4a03      	ldr	r2, [pc, #12]	; (80007b8 <GPIO_init+0x2d0>)
 80007ac:	430b      	orrs	r3, r1
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40013c00 	.word	0x40013c00
 80007bc:	40020000 	.word	0x40020000
 80007c0:	40020400 	.word	0x40020400
 80007c4:	40020800 	.word	0x40020800
 80007c8:	40020c00 	.word	0x40020c00
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40013800 	.word	0x40013800

080007d4 <GPIO_IRQconf>:
* @Note              -  none

 */

void GPIO_IRQconf (uint8_t IRQnum ,uint8_t ENORDS )
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	460a      	mov	r2, r1
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	4613      	mov	r3, r2
 80007e2:	71bb      	strb	r3, [r7, #6]
    if (ENORDS == ENABLE)
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d133      	bne.n	8000852 <GPIO_IRQconf+0x7e>
    {
            if (IRQnum <= 31 )
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b1f      	cmp	r3, #31
 80007ee:	d80a      	bhi.n	8000806 <GPIO_IRQconf+0x32>
            {
                NVIC_ISER0 |= (1 << IRQnum );
 80007f0:	4b34      	ldr	r3, [pc, #208]	; (80008c4 <GPIO_IRQconf+0xf0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	2101      	movs	r1, #1
 80007f8:	fa01 f202 	lsl.w	r2, r1, r2
 80007fc:	4611      	mov	r1, r2
 80007fe:	4a31      	ldr	r2, [pc, #196]	; (80008c4 <GPIO_IRQconf+0xf0>)
 8000800:	430b      	orrs	r3, r1
 8000802:	6013      	str	r3, [r2, #0]

              NVIC_ICER2 |= (1 << IRQnum % 64);
            }

    }
}
 8000804:	e059      	b.n	80008ba <GPIO_IRQconf+0xe6>
            else if (IRQnum > 31 && IRQnum < 64 )
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b1f      	cmp	r3, #31
 800080a:	d90f      	bls.n	800082c <GPIO_IRQconf+0x58>
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b3f      	cmp	r3, #63	; 0x3f
 8000810:	d80c      	bhi.n	800082c <GPIO_IRQconf+0x58>
              NVIC_ISER1 |= (1 << IRQnum % 32);
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <GPIO_IRQconf+0xf4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	79fa      	ldrb	r2, [r7, #7]
 8000818:	f002 021f 	and.w	r2, r2, #31
 800081c:	2101      	movs	r1, #1
 800081e:	fa01 f202 	lsl.w	r2, r1, r2
 8000822:	4611      	mov	r1, r2
 8000824:	4a28      	ldr	r2, [pc, #160]	; (80008c8 <GPIO_IRQconf+0xf4>)
 8000826:	430b      	orrs	r3, r1
 8000828:	6013      	str	r3, [r2, #0]
 800082a:	e046      	b.n	80008ba <GPIO_IRQconf+0xe6>
            else if (IRQnum >= 64 && IRQnum < 96 )
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b3f      	cmp	r3, #63	; 0x3f
 8000830:	d943      	bls.n	80008ba <GPIO_IRQconf+0xe6>
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b5f      	cmp	r3, #95	; 0x5f
 8000836:	d840      	bhi.n	80008ba <GPIO_IRQconf+0xe6>
              NVIC_ISER2 |= (1 << IRQnum % 64);
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <GPIO_IRQconf+0xf8>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	79fa      	ldrb	r2, [r7, #7]
 800083e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000842:	2101      	movs	r1, #1
 8000844:	fa01 f202 	lsl.w	r2, r1, r2
 8000848:	4611      	mov	r1, r2
 800084a:	4a20      	ldr	r2, [pc, #128]	; (80008cc <GPIO_IRQconf+0xf8>)
 800084c:	430b      	orrs	r3, r1
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	e033      	b.n	80008ba <GPIO_IRQconf+0xe6>
        if (IRQnum <= 31 )
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b1f      	cmp	r3, #31
 8000856:	d80a      	bhi.n	800086e <GPIO_IRQconf+0x9a>
                NVIC_ICER0 |= (1 << IRQnum );
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <GPIO_IRQconf+0xfc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	79fa      	ldrb	r2, [r7, #7]
 800085e:	2101      	movs	r1, #1
 8000860:	fa01 f202 	lsl.w	r2, r1, r2
 8000864:	4611      	mov	r1, r2
 8000866:	4a1a      	ldr	r2, [pc, #104]	; (80008d0 <GPIO_IRQconf+0xfc>)
 8000868:	430b      	orrs	r3, r1
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	e025      	b.n	80008ba <GPIO_IRQconf+0xe6>
            else if (IRQnum > 31 && IRQnum < 64 )
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b1f      	cmp	r3, #31
 8000872:	d90f      	bls.n	8000894 <GPIO_IRQconf+0xc0>
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	2b3f      	cmp	r3, #63	; 0x3f
 8000878:	d80c      	bhi.n	8000894 <GPIO_IRQconf+0xc0>
              NVIC_ICER1 |= (1 << IRQnum % 32);
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <GPIO_IRQconf+0x100>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	f002 021f 	and.w	r2, r2, #31
 8000884:	2101      	movs	r1, #1
 8000886:	fa01 f202 	lsl.w	r2, r1, r2
 800088a:	4611      	mov	r1, r2
 800088c:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <GPIO_IRQconf+0x100>)
 800088e:	430b      	orrs	r3, r1
 8000890:	6013      	str	r3, [r2, #0]
 8000892:	e012      	b.n	80008ba <GPIO_IRQconf+0xe6>
            else if (IRQnum >= 64 && IRQnum < 96 )
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b3f      	cmp	r3, #63	; 0x3f
 8000898:	d90f      	bls.n	80008ba <GPIO_IRQconf+0xe6>
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b5f      	cmp	r3, #95	; 0x5f
 800089e:	d80c      	bhi.n	80008ba <GPIO_IRQconf+0xe6>
              NVIC_ICER2 |= (1 << IRQnum % 64);
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <GPIO_IRQconf+0x104>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	79fa      	ldrb	r2, [r7, #7]
 80008a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008aa:	2101      	movs	r1, #1
 80008ac:	fa01 f202 	lsl.w	r2, r1, r2
 80008b0:	4611      	mov	r1, r2
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <GPIO_IRQconf+0x104>)
 80008b4:	430b      	orrs	r3, r1
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	e7ff      	b.n	80008ba <GPIO_IRQconf+0xe6>
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	e000e100 	.word	0xe000e100
 80008c8:	e000e104 	.word	0xe000e104
 80008cc:	e000e108 	.word	0xe000e108
 80008d0:	e000e180 	.word	0xe000e180
 80008d4:	e000e184 	.word	0xe000e184
 80008d8:	e000e188 	.word	0xe000e188

080008dc <GPIO_PriorityConf>:
*
* @Note              -  none

 */
void GPIO_PriorityConf ( uint8_t IRQpriority , uint8_t IRQnum)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	460a      	mov	r2, r1
 80008e6:	71fb      	strb	r3, [r7, #7]
 80008e8:	4613      	mov	r3, r2
 80008ea:	71bb      	strb	r3, [r7, #6]
   uint8_t iprx= IRQnum /4;
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	089b      	lsrs	r3, r3, #2
 80008f0:	73fb      	strb	r3, [r7, #15]
   uint8_t iprx_sec= IRQnum %4;
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	f003 0303 	and.w	r3, r3, #3
 80008f8:	73bb      	strb	r3, [r7, #14]
   uint8_t shiftAmount = (  8 * iprx_sec + 8 - NUM_PR_BITS_IMPLEMENTED);
 80008fa:	7bbb      	ldrb	r3, [r7, #14]
 80008fc:	3301      	adds	r3, #1
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	b2db      	uxtb	r3, r3
 8000904:	3b04      	subs	r3, #4
 8000906:	737b      	strb	r3, [r7, #13]
   *( NVIC_IPR + (iprx)) |= (IRQpriority << shiftAmount ) ;
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000910:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	79f9      	ldrb	r1, [r7, #7]
 8000918:	7b7b      	ldrb	r3, [r7, #13]
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	4619      	mov	r1, r3
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000928:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800092c:	430a      	orrs	r2, r1
 800092e:	601a      	str	r2, [r3, #0]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
	...

0800093c <GPIO_IRQ_Handle>:
* @Note              -  none

 */

void GPIO_IRQ_Handle (uint8_t pinNum)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
    // clear exti pr reg
    if ( EXTI ->PR & (1 << pinNum))
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <GPIO_IRQ_Handle+0x3c>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	2101      	movs	r1, #1
 800094e:	fa01 f202 	lsl.w	r2, r1, r2
 8000952:	4013      	ands	r3, r2
 8000954:	2b00      	cmp	r3, #0
 8000956:	d009      	beq.n	800096c <GPIO_IRQ_Handle+0x30>
    {
        // clear the bit
        EXTI ->PR |= (1 << pinNum);
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <GPIO_IRQ_Handle+0x3c>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	79fa      	ldrb	r2, [r7, #7]
 800095e:	2101      	movs	r1, #1
 8000960:	fa01 f202 	lsl.w	r2, r1, r2
 8000964:	4611      	mov	r1, r2
 8000966:	4a04      	ldr	r2, [pc, #16]	; (8000978 <GPIO_IRQ_Handle+0x3c>)
 8000968:	430b      	orrs	r3, r1
 800096a:	6153      	str	r3, [r2, #20]
    }
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40013c00 	.word	0x40013c00

0800097c <GetFlagStatus>:
static void		spi_rxne_it_handle(SPI_Handler *pSPIHandle);
static void		spi_err_it_handle(SPI_Handler *pSPIHandle);

/********************get flag status *************************/
uint8_t GetFlagStatus(SPI_REGDEF *pSPI , uint32_t FlagName)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
	if(pSPI->SR & FlagName)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	4013      	ands	r3, r2
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <GetFlagStatus+0x1a>
		{
			return FLAG_SET;
 8000992:	2301      	movs	r3, #1
 8000994:	e000      	b.n	8000998 <GetFlagStatus+0x1c>
		}
		return FLAG_RESET;
 8000996:	2300      	movs	r3, #0
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
	...

080009a4 <SPI_clkCntrl>:
* @Note              -  none

 */

void SPI_clkCntrl(SPI_REGDEF *pSpi  , uint8_t EnOrDsi)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	460b      	mov	r3, r1
 80009ae:	70fb      	strb	r3, [r7, #3]
   if (EnOrDsi == ENABLE)
 80009b0:	78fb      	ldrb	r3, [r7, #3]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d12b      	bne.n	8000a0e <SPI_clkCntrl+0x6a>
   {
     if(pSpi == SPI1 )
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a2d      	ldr	r2, [pc, #180]	; (8000a70 <SPI_clkCntrl+0xcc>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d106      	bne.n	80009cc <SPI_clkCntrl+0x28>
     {
    	 SPI1_PCLK_EN();
 80009be:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <SPI_clkCntrl+0xd0>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a2c      	ldr	r2, [pc, #176]	; (8000a74 <SPI_clkCntrl+0xd0>)
 80009c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
     {
    	 SPI4_PCLK_DS();
     }

   }
}
 80009ca:	e04b      	b.n	8000a64 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI2 )
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a2a      	ldr	r2, [pc, #168]	; (8000a78 <SPI_clkCntrl+0xd4>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d106      	bne.n	80009e2 <SPI_clkCntrl+0x3e>
    	 SPI2_PCLK_EN();
 80009d4:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <SPI_clkCntrl+0xd0>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <SPI_clkCntrl+0xd0>)
 80009da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009e0:	e040      	b.n	8000a64 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI3 )
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a25      	ldr	r2, [pc, #148]	; (8000a7c <SPI_clkCntrl+0xd8>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d106      	bne.n	80009f8 <SPI_clkCntrl+0x54>
    	 SPI3_PCLK_EN();
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <SPI_clkCntrl+0xd0>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <SPI_clkCntrl+0xd0>)
 80009f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009f6:	e035      	b.n	8000a64 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI4 )
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a21      	ldr	r2, [pc, #132]	; (8000a80 <SPI_clkCntrl+0xdc>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d131      	bne.n	8000a64 <SPI_clkCntrl+0xc0>
    	 SPI4_PCLK_EN();
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <SPI_clkCntrl+0xd0>)
 8000a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a04:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <SPI_clkCntrl+0xd0>)
 8000a06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a0a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a0c:	e02a      	b.n	8000a64 <SPI_clkCntrl+0xc0>
     if(pSpi == SPI1 )
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <SPI_clkCntrl+0xcc>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d106      	bne.n	8000a24 <SPI_clkCntrl+0x80>
    	 SPI1_PCLK_DS();
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <SPI_clkCntrl+0xd0>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <SPI_clkCntrl+0xd0>)
 8000a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a22:	e01f      	b.n	8000a64 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI2 )
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <SPI_clkCntrl+0xd4>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d106      	bne.n	8000a3a <SPI_clkCntrl+0x96>
    	 SPI2_PCLK_DS();
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <SPI_clkCntrl+0xd0>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <SPI_clkCntrl+0xd0>)
 8000a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a38:	e014      	b.n	8000a64 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI3 )
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <SPI_clkCntrl+0xd8>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d106      	bne.n	8000a50 <SPI_clkCntrl+0xac>
    	 SPI3_PCLK_DS();
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <SPI_clkCntrl+0xd0>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <SPI_clkCntrl+0xd0>)
 8000a48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a4e:	e009      	b.n	8000a64 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI4 )
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <SPI_clkCntrl+0xdc>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d105      	bne.n	8000a64 <SPI_clkCntrl+0xc0>
    	 SPI4_PCLK_DS();
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <SPI_clkCntrl+0xd0>)
 8000a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5c:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <SPI_clkCntrl+0xd0>)
 8000a5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a62:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40013000 	.word	0x40013000
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40003800 	.word	0x40003800
 8000a7c:	40003c00 	.word	0x40003c00
 8000a80:	40013400 	.word	0x40013400

08000a84 <SPI_init>:
* @Note              -  none

 */

void SPI_init(SPI_Handler *pSPI_handler)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

	//peripheral clock enable
	SPI_clkCntrl(pSPI_handler -> pSPI , ENABLE);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2101      	movs	r1, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff86 	bl	80009a4 <SPI_clkCntrl>

  // lets configure the SPI_CR1 register
   uint32_t temp = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
   //1. configure the device mode
   	temp|= (pSPI_handler -> SpiConfig.SPI_DeviceMode << SPI_CR1_MSTR) ;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	791b      	ldrb	r3, [r3, #4]
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]

   	//2. Configure the bus config
   if (pSPI_handler -> SpiConfig .SPI_BusConfg == SPI_BUS_CONFIG_FD)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	795b      	ldrb	r3, [r3, #5]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d104      	bne.n	8000abc <SPI_init+0x38>
   {
     // enable unidirectional line
     temp &= ~(1 << SPI_CR1_BIDI_MODE);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	e014      	b.n	8000ae6 <SPI_init+0x62>

   }
  else if (pSPI_handler -> SpiConfig .SPI_BusConfg == SPI_BUS_CONFIG_HD)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	795b      	ldrb	r3, [r3, #5]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d104      	bne.n	8000ace <SPI_init+0x4a>
   {
     // enable bidirectional line
     temp  |= (1 << SPI_CR1_BIDI_MODE);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	e00b      	b.n	8000ae6 <SPI_init+0x62>

   }
    else if (pSPI_handler -> SpiConfig .SPI_BusConfg == SPI_BUS_CONFIG_SIMPLEX_RX)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	795b      	ldrb	r3, [r3, #5]
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d107      	bne.n	8000ae6 <SPI_init+0x62>
   {
      // enabble unidirectional line
     temp &= ~(1 << SPI_CR1_BIDI_MODE);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000adc:	60fb      	str	r3, [r7, #12]
     // enable recieve only mode
     temp |= (1<< SPI_CR1_RX_ONLY) ;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae4:	60fb      	str	r3, [r7, #12]

   }

   // configure the clock speed

    temp |= (pSPI_handler -> SpiConfig.SPI_Speed << SPI_CR1_BR);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7a9b      	ldrb	r3, [r3, #10]
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	461a      	mov	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]

   // configure the DFF
   temp |= (pSPI_handler -> SpiConfig.SPI_DFF << SPI_CR1_DFF);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	799b      	ldrb	r3, [r3, #6]
 8000af8:	02db      	lsls	r3, r3, #11
 8000afa:	461a      	mov	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]

    // configure the CPHA
   temp |= (pSPI_handler -> SpiConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	79db      	ldrb	r3, [r3, #7]
 8000b06:	461a      	mov	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]

   // configure the CPOL
   temp |= (pSPI_handler -> SpiConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7a1b      	ldrb	r3, [r3, #8]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	461a      	mov	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]

   // configure the SSM

  temp |=  pSPI_handler -> SpiConfig.SPI_SSM << SPI_CR1_SSM;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7a5b      	ldrb	r3, [r3, #9]
 8000b20:	025b      	lsls	r3, r3, #9
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]




   // finish the configure
   pSPI_handler -> pSPI -> CR1 = temp ;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	601a      	str	r2, [r3, #0]



}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <SPI_IRQconf>:
* @Note              -  none

 */

void SPI_IRQconf (uint8_t IRQnum , uint8_t ENORDS )
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	460a      	mov	r2, r1
 8000b46:	71fb      	strb	r3, [r7, #7]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	71bb      	strb	r3, [r7, #6]
	 if (ENORDS == ENABLE)
 8000b4c:	79bb      	ldrb	r3, [r7, #6]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d133      	bne.n	8000bba <SPI_IRQconf+0x7e>
	    {
					if (IRQnum <= 31 )
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b1f      	cmp	r3, #31
 8000b56:	d80a      	bhi.n	8000b6e <SPI_IRQconf+0x32>
					{
						NVIC_ISER0 |= (1 << IRQnum );
 8000b58:	4b36      	ldr	r3, [pc, #216]	; (8000c34 <SPI_IRQconf+0xf8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	79fa      	ldrb	r2, [r7, #7]
 8000b5e:	2101      	movs	r1, #1
 8000b60:	fa01 f202 	lsl.w	r2, r1, r2
 8000b64:	4611      	mov	r1, r2
 8000b66:	4a33      	ldr	r2, [pc, #204]	; (8000c34 <SPI_IRQconf+0xf8>)
 8000b68:	430b      	orrs	r3, r1
 8000b6a:	6013      	str	r3, [r2, #0]
		 			{

		 			  NVIC_ISER2 &=~  (1 << IRQnum % 64);
		 			}
	 	}
}
 8000b6c:	e05c      	b.n	8000c28 <SPI_IRQconf+0xec>
					else if (IRQnum > 31 && IRQnum < 64 )
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b1f      	cmp	r3, #31
 8000b72:	d90f      	bls.n	8000b94 <SPI_IRQconf+0x58>
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	2b3f      	cmp	r3, #63	; 0x3f
 8000b78:	d80c      	bhi.n	8000b94 <SPI_IRQconf+0x58>
					  NVIC_ISER1 |= (1 << IRQnum % 32);
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <SPI_IRQconf+0xfc>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	79fa      	ldrb	r2, [r7, #7]
 8000b80:	f002 021f 	and.w	r2, r2, #31
 8000b84:	2101      	movs	r1, #1
 8000b86:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4a2a      	ldr	r2, [pc, #168]	; (8000c38 <SPI_IRQconf+0xfc>)
 8000b8e:	430b      	orrs	r3, r1
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	e049      	b.n	8000c28 <SPI_IRQconf+0xec>
					else if (IRQnum >= 64 && IRQnum < 96 )
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b3f      	cmp	r3, #63	; 0x3f
 8000b98:	d946      	bls.n	8000c28 <SPI_IRQconf+0xec>
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b5f      	cmp	r3, #95	; 0x5f
 8000b9e:	d843      	bhi.n	8000c28 <SPI_IRQconf+0xec>
					  NVIC_ISER2 |= (1 << IRQnum % 64);
 8000ba0:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <SPI_IRQconf+0x100>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	79fa      	ldrb	r2, [r7, #7]
 8000ba6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000baa:	2101      	movs	r1, #1
 8000bac:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <SPI_IRQconf+0x100>)
 8000bb4:	430b      	orrs	r3, r1
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	e036      	b.n	8000c28 <SPI_IRQconf+0xec>
		 	 	 	if (IRQnum <= 31 )
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b1f      	cmp	r3, #31
 8000bbe:	d80b      	bhi.n	8000bd8 <SPI_IRQconf+0x9c>
		 				NVIC_ISER0 &=~ (1 << IRQnum );
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <SPI_IRQconf+0xf8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	79fa      	ldrb	r2, [r7, #7]
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bcc:	43d2      	mvns	r2, r2
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4a18      	ldr	r2, [pc, #96]	; (8000c34 <SPI_IRQconf+0xf8>)
 8000bd2:	400b      	ands	r3, r1
 8000bd4:	6013      	str	r3, [r2, #0]
}
 8000bd6:	e027      	b.n	8000c28 <SPI_IRQconf+0xec>
		 			else if (IRQnum > 31 && IRQnum < 64 )
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b1f      	cmp	r3, #31
 8000bdc:	d910      	bls.n	8000c00 <SPI_IRQconf+0xc4>
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b3f      	cmp	r3, #63	; 0x3f
 8000be2:	d80d      	bhi.n	8000c00 <SPI_IRQconf+0xc4>
		 			  NVIC_ISER1 &=~  (1 << IRQnum % 32);
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <SPI_IRQconf+0xfc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	79fa      	ldrb	r2, [r7, #7]
 8000bea:	f002 021f 	and.w	r2, r2, #31
 8000bee:	2101      	movs	r1, #1
 8000bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf4:	43d2      	mvns	r2, r2
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <SPI_IRQconf+0xfc>)
 8000bfa:	400b      	ands	r3, r1
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e013      	b.n	8000c28 <SPI_IRQconf+0xec>
		 			else if (IRQnum >= 64 && IRQnum < 96 )
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b3f      	cmp	r3, #63	; 0x3f
 8000c04:	d910      	bls.n	8000c28 <SPI_IRQconf+0xec>
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b5f      	cmp	r3, #95	; 0x5f
 8000c0a:	d80d      	bhi.n	8000c28 <SPI_IRQconf+0xec>
		 			  NVIC_ISER2 &=~  (1 << IRQnum % 64);
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <SPI_IRQconf+0x100>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	79fa      	ldrb	r2, [r7, #7]
 8000c12:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c16:	2101      	movs	r1, #1
 8000c18:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1c:	43d2      	mvns	r2, r2
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <SPI_IRQconf+0x100>)
 8000c22:	400b      	ands	r3, r1
 8000c24:	6013      	str	r3, [r2, #0]
}
 8000c26:	e7ff      	b.n	8000c28 <SPI_IRQconf+0xec>
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000e104 	.word	0xe000e104
 8000c3c:	e000e108 	.word	0xe000e108

08000c40 <SPI_IRQ_Handle>:
* @Note              -  none

 */

void SPI_IRQ_Handle (SPI_Handler *pSPIHandle)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	uint8_t temp1,temp2;
	temp1 = pSPIHandle -> pSPI -> SR  & ( 1 << SPI_SR_TXE) ;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle -> pSPI -> CR2 & ( 1 << SPI_CR2_TXEIE) ;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000c62:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2 )
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d005      	beq.n	8000c76 <SPI_IRQ_Handle+0x36>
 8000c6a:	7bbb      	ldrb	r3, [r7, #14]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <SPI_IRQ_Handle+0x36>
	{
		spi_txe_it_handle(pSPIHandle);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 f8ae 	bl	8000dd2 <spi_txe_it_handle>

	}

	temp1 = pSPIHandle -> pSPI -> SR  & ( 1 << SPI_SR_RXNE) ;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle -> pSPI -> CR2 & ( 1 << SPI_CR2_RXNEIE) ;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c90:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2 )
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d005      	beq.n	8000ca4 <SPI_IRQ_Handle+0x64>
 8000c98:	7bbb      	ldrb	r3, [r7, #14]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <SPI_IRQ_Handle+0x64>
	{
		spi_rxne_it_handle(pSPIHandle);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f000 f8d7 	bl	8000e52 <spi_rxne_it_handle>
	}

	temp1 = pSPIHandle -> pSPI -> SR  & ( 1 << SPI_SR_OVR) ;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb0:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle -> pSPI -> CR2 & ( 1 << SPI_CR2_ERRIE) ;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	f003 0320 	and.w	r3, r3, #32
 8000cbe:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2 )
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d005      	beq.n	8000cd2 <SPI_IRQ_Handle+0x92>
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d002      	beq.n	8000cd2 <SPI_IRQ_Handle+0x92>
	{
		spi_err_it_handle(pSPIHandle);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 f902 	bl	8000ed6 <spi_err_it_handle>
	}
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_REGDEF *pSPIx , uint8_t EnOrDsi)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	70fb      	strb	r3, [r7, #3]
	if ( EnOrDsi == ENABLE )
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d106      	bne.n	8000cfa <SPI_PeripheralControl+0x20>
	{
		pSPIx -> CR1 |= (1 << SPI_CR1_SPE ) ;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	601a      	str	r2, [r3, #0]

	else
	{
		pSPIx -> CR1  &= ~ (1 << SPI_CR1_SPE ) ;
	}
}
 8000cf8:	e005      	b.n	8000d06 <SPI_PeripheralControl+0x2c>
		pSPIx -> CR1  &= ~ (1 << SPI_CR1_SPE ) ;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <SPI_ssoe_conf>:
}



void SPI_ssoe_conf(SPI_REGDEF *pSPIx , uint8_t EnOrDsi)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	70fb      	strb	r3, [r7, #3]
	if ( EnOrDsi == ENABLE )
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d106      	bne.n	8000d30 <SPI_ssoe_conf+0x20>
		{
			pSPIx -> CR2 |= (1 << SPI_CR2_SSOE ) ;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f043 0204 	orr.w	r2, r3, #4
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	605a      	str	r2, [r3, #4]

		else
		{
			pSPIx -> CR2  &= ~ (1 << SPI_CR2_SSOE  ) ;
		}
}
 8000d2e:	e005      	b.n	8000d3c <SPI_ssoe_conf+0x2c>
			pSPIx -> CR2  &= ~ (1 << SPI_CR2_SSOE  ) ;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f023 0204 	bic.w	r2, r3, #4
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	605a      	str	r2, [r3, #4]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <SPI_SendDataIT>:



uint8_t SPI_SendDataIT(SPI_Handler *pSPIHandle,uint8_t *pTxBuffer, uint32_t Len)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b087      	sub	sp, #28
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle -> TxState ;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	7f1b      	ldrb	r3, [r3, #28]
 8000d56:	75fb      	strb	r3, [r7, #23]
	if (state != SPI_BSY_TX )
 8000d58:	7dfb      	ldrb	r3, [r7, #23]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d010      	beq.n	8000d80 <SPI_SendDataIT+0x3a>
	{
 // 1 - SAVE THE ADRESS AND LEN

	pSPIHandle -> pTxBuffer = pTxBuffer ;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	60da      	str	r2, [r3, #12]
	pSPIHandle -> TxLen = Len ;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	615a      	str	r2, [r3, #20]

 // 2- MARK THE SPI STATE AS BUSY
	pSPIHandle -> TxState = SPI_BSY_TX;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	771a      	strb	r2, [r3, #28]

//3-  ENABLE THE TEXEIE CONTROL
	pSPIHandle -> pSPI -> CR2 |= ( 1 << SPI_CR2_TXEIE);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d7e:	605a      	str	r2, [r3, #4]

	}
return state ;
 8000d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <SPI_RecieveIT>:
uint8_t SPI_RecieveIT(SPI_Handler *pSPIHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle -> RxState ;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	7f5b      	ldrb	r3, [r3, #29]
 8000d9c:	75fb      	strb	r3, [r7, #23]
		if (state != SPI_BSY_RX )
 8000d9e:	7dfb      	ldrb	r3, [r7, #23]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d010      	beq.n	8000dc6 <SPI_RecieveIT+0x3a>
		{
	 // 1 - SAVE THE ADRESS AND LEN

		pSPIHandle -> pRxBuffer = pRxBuffer ;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	611a      	str	r2, [r3, #16]
		pSPIHandle -> RxLen = Len ;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	619a      	str	r2, [r3, #24]

	 // 2- MARK THE SPI STATE AS BUSY
		pSPIHandle -> RxState = SPI_BSY_RX;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2201      	movs	r2, #1
 8000db4:	775a      	strb	r2, [r3, #29]

	//3-  ENABLE THE TEXEIE CONTROL
		pSPIHandle -> pSPI -> CR2 |= ( 1 << SPI_CR2_RXNEIE);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dc4:	605a      	str	r2, [r3, #4]

		}
	return state ;
 8000dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	371c      	adds	r7, #28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr

08000dd2 <spi_txe_it_handle>:

/* implement some helper fn */
static void	spi_txe_it_handle(SPI_Handler *pSPIHandle)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
	if( (pSPIHandle ->pSPI->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d015      	beq.n	8000e14 <spi_txe_it_handle+0x42>
			{
				//16 bit DFF
				//1. load the data in to the DR
				pSPIHandle ->pSPI->DR = *((uint16_t*)pSPIHandle -> pTxBuffer);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	881a      	ldrh	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	60da      	str	r2, [r3, #12]
				pSPIHandle-> TxLen--;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	1e5a      	subs	r2, r3, #1
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	615a      	str	r2, [r3, #20]
				pSPIHandle-> TxLen--;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	1e5a      	subs	r2, r3, #1
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	615a      	str	r2, [r3, #20]
				(uint16_t*)pSPIHandle->pTxBuffer++;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	1c5a      	adds	r2, r3, #1
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	e00f      	b.n	8000e34 <spi_txe_it_handle+0x62>
			}
	else
			{
				//8 bit DFF
				pSPIHandle ->pSPI->DR = *(pSPIHandle -> pTxBuffer);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	781a      	ldrb	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	60da      	str	r2, [r3, #12]
				pSPIHandle-> TxLen--;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	1e5a      	subs	r2, r3, #1
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	615a      	str	r2, [r3, #20]
				pSPIHandle->pTxBuffer++;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	60da      	str	r2, [r3, #12]
			}
	if ( ! pSPIHandle-> TxLen)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d106      	bne.n	8000e4a <spi_txe_it_handle+0x78>
	{
		SPI_CloseTransmission(pSPIHandle);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 f862 	bl	8000f06 <SPI_CloseTransmission>
		SPI_ApplicationEventCallback(pSPIHandle , SPI_EVENT_TX_CMPLT);
 8000e42:	2101      	movs	r1, #1
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff fa9d 	bl	8000384 <SPI_ApplicationEventCallback>


	}
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <spi_rxne_it_handle>:
static void	spi_rxne_it_handle(SPI_Handler *pSPIHandle)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
if( (pSPIHandle ->pSPI->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d016      	beq.n	8000e96 <spi_rxne_it_handle+0x44>
			{
				//16 bit DFF
				//1. load the data in to the DR
				  *((uint16_t*)pSPIHandle -> pRxBuffer) = (uint16_t)pSPIHandle ->pSPI->DR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	b292      	uxth	r2, r2
 8000e74:	801a      	strh	r2, [r3, #0]
				pSPIHandle-> RxLen--;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	1e5a      	subs	r2, r3, #1
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	619a      	str	r2, [r3, #24]
				pSPIHandle-> RxLen--;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	1e5a      	subs	r2, r3, #1
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	619a      	str	r2, [r3, #24]
				(uint16_t*)pSPIHandle->pRxBuffer++;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	e010      	b.n	8000eb8 <spi_rxne_it_handle+0x66>
			}
	else
			{
				//8 bit DFF
		 *(pSPIHandle -> pRxBuffer) = (uint8_t)pSPIHandle ->pSPI->DR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	701a      	strb	r2, [r3, #0]
				pSPIHandle-> RxLen--;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	1e5a      	subs	r2, r3, #1
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	619a      	str	r2, [r3, #24]
				pSPIHandle->pRxBuffer++;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	611a      	str	r2, [r3, #16]
			}
	if ( ! pSPIHandle-> RxLen)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d106      	bne.n	8000ece <spi_rxne_it_handle+0x7c>
		{
		SPI_CloseReception(pSPIHandle);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f000 f83a 	bl	8000f3a <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle , SPI_EVENT_RX_CMPLT);
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff fa5b 	bl	8000384 <SPI_ApplicationEventCallback>
		}

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <spi_err_it_handle>:

static void	spi_err_it_handle(SPI_Handler *pSPIHandle)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	uint8_t temp;
 //clr the ovr flag
	if (pSPIHandle -> TxState != SPI_BSY_TX)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7f1b      	ldrb	r3, [r3, #28]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d007      	beq.n	8000ef6 <spi_err_it_handle+0x20>
	{
		temp = pSPIHandle -> pSPI -> DR ;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle -> pSPI -> SR ;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	73fb      	strb	r3, [r7, #15]
		(void) temp ;
	}

	// infor the app
	SPI_ApplicationEventCallback(pSPIHandle , SPI_EVENT_OVR_ERR);
 8000ef6:	2103      	movs	r1, #3
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff fa43 	bl	8000384 <SPI_ApplicationEventCallback>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <SPI_CloseTransmission>:



void SPI_CloseTransmission (SPI_Handler *pSPI_handler)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
	pSPI_handler->pSPI -> CR2 &= ~ ( 1 << SPI_CR2_TXEIE) ;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f1c:	605a      	str	r2, [r3, #4]
	pSPI_handler->pTxBuffer =NULL ;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
	pSPI_handler-> TxLen = 0;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
	pSPI_handler-> TxState = SPI_READY;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	771a      	strb	r2, [r3, #28]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr

08000f3a <SPI_CloseReception>:
void SPI_CloseReception(SPI_Handler *pSPI_handler)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
	pSPI_handler->pSPI -> CR2 &= ~ ( 1 << SPI_CR2_RXNEIE) ;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f50:	605a      	str	r2, [r3, #4]
	pSPI_handler->pRxBuffer =NULL ;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
	pSPI_handler-> RxLen = 0;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
	pSPI_handler-> RxState = SPI_READY;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	775a      	strb	r2, [r3, #29]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
	...

08000f70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f74:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	; (8000fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <LoopForever+0xe>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	; (8000fbc <LoopForever+0x16>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f9e:	f000 f819 	bl	8000fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fa2:	f7ff f989 	bl	80002b8 <main>

08000fa6 <LoopForever>:

LoopForever:
  b LoopForever
 8000fa6:	e7fe      	b.n	8000fa6 <LoopForever>
  ldr   r0, =_estack
 8000fa8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000fb4:	0800103c 	.word	0x0800103c
  ldr r2, =_sbss
 8000fb8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000fbc:	20000238 	.word	0x20000238

08000fc0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>

08000fc2 <memset>:
 8000fc2:	4402      	add	r2, r0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d100      	bne.n	8000fcc <memset+0xa>
 8000fca:	4770      	bx	lr
 8000fcc:	f803 1b01 	strb.w	r1, [r3], #1
 8000fd0:	e7f9      	b.n	8000fc6 <memset+0x4>
	...

08000fd4 <__libc_init_array>:
 8000fd4:	b570      	push	{r4, r5, r6, lr}
 8000fd6:	4d0d      	ldr	r5, [pc, #52]	; (800100c <__libc_init_array+0x38>)
 8000fd8:	4c0d      	ldr	r4, [pc, #52]	; (8001010 <__libc_init_array+0x3c>)
 8000fda:	1b64      	subs	r4, r4, r5
 8000fdc:	10a4      	asrs	r4, r4, #2
 8000fde:	2600      	movs	r6, #0
 8000fe0:	42a6      	cmp	r6, r4
 8000fe2:	d109      	bne.n	8000ff8 <__libc_init_array+0x24>
 8000fe4:	4d0b      	ldr	r5, [pc, #44]	; (8001014 <__libc_init_array+0x40>)
 8000fe6:	4c0c      	ldr	r4, [pc, #48]	; (8001018 <__libc_init_array+0x44>)
 8000fe8:	f000 f818 	bl	800101c <_init>
 8000fec:	1b64      	subs	r4, r4, r5
 8000fee:	10a4      	asrs	r4, r4, #2
 8000ff0:	2600      	movs	r6, #0
 8000ff2:	42a6      	cmp	r6, r4
 8000ff4:	d105      	bne.n	8001002 <__libc_init_array+0x2e>
 8000ff6:	bd70      	pop	{r4, r5, r6, pc}
 8000ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ffc:	4798      	blx	r3
 8000ffe:	3601      	adds	r6, #1
 8001000:	e7ee      	b.n	8000fe0 <__libc_init_array+0xc>
 8001002:	f855 3b04 	ldr.w	r3, [r5], #4
 8001006:	4798      	blx	r3
 8001008:	3601      	adds	r6, #1
 800100a:	e7f2      	b.n	8000ff2 <__libc_init_array+0x1e>
 800100c:	08001034 	.word	0x08001034
 8001010:	08001034 	.word	0x08001034
 8001014:	08001034 	.word	0x08001034
 8001018:	08001038 	.word	0x08001038

0800101c <_init>:
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101e:	bf00      	nop
 8001020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001022:	bc08      	pop	{r3}
 8001024:	469e      	mov	lr, r3
 8001026:	4770      	bx	lr

08001028 <_fini>:
 8001028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102a:	bf00      	nop
 800102c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800102e:	bc08      	pop	{r3}
 8001030:	469e      	mov	lr, r3
 8001032:	4770      	bx	lr
