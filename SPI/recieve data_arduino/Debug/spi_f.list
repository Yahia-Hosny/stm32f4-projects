
spi_f.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b8c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d20  08000d28  00010d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d20  08000d20  00010d28  2**0
                  CONTENTS
  4 .ARM          00000000  08000d20  08000d20  00010d28  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d20  08000d28  00010d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d20  08000d20  00010d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d24  08000d24  00010d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000d28  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000d28  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010d28  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010d52  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001381  00000000  00000000  00010d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000553  00000000  00000000  00012116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  00012670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000118  00000000  00000000  000127f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024ef  00000000  00000000  00012908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001870  00000000  00000000  00014df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009944  00000000  00000000  00016667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000057c  00000000  00000000  0001ffac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00020528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000d08 	.word	0x08000d08

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000d08 	.word	0x08000d08

080001d4 <delay>:


#define LED_PIN          9

void delay()
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <delay+0x28>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d9f8      	bls.n	80001e0 <delay+0xc>
}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	0003d08f 	.word	0x0003d08f

08000200 <SPI_VerifyResponse>:
uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	71fb      	strb	r3, [r7, #7]

	if(ackbyte == (uint8_t)0xFA)
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	2bfa      	cmp	r3, #250	; 0xfa
 800020e:	d101      	bne.n	8000214 <SPI_VerifyResponse+0x14>
	{
		//ack
		return 1;
 8000210:	2301      	movs	r3, #1
 8000212:	e000      	b.n	8000216 <SPI_VerifyResponse+0x16>
	}

	return 0;
 8000214:	2300      	movs	r3, #0
}
 8000216:	4618      	mov	r0, r3
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr

08000220 <spi_led_ctrl>:
void spi_led_ctrl()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xff;
 8000226:	23ff      	movs	r3, #255	; 0xff
 8000228:	73fb      	strb	r3, [r7, #15]
	uint8_t dummy_read ;
	uint8_t ackbyte ;
	uint8_t args[2] = { LED_PIN , LED_ON};
 800022a:	f240 1309 	movw	r3, #265	; 0x109
 800022e:	813b      	strh	r3, [r7, #8]
	uint8_t commandCode = COMMAND_LED_CRTL;
 8000230:	2350      	movs	r3, #80	; 0x50
 8000232:	71fb      	strb	r3, [r7, #7]
	// send the command to the slave
	SPI_SendData(SPI2, &commandCode, 1);
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	2201      	movs	r2, #1
 8000238:	4619      	mov	r1, r3
 800023a:	481b      	ldr	r0, [pc, #108]	; (80002a8 <spi_led_ctrl+0x88>)
 800023c:	f000 fc65 	bl	8000b0a <SPI_SendData>
	// do dummy read to clear off the RXNE
	SPI_Recieve(SPI2, &dummy_read, 1);
 8000240:	f107 030e 	add.w	r3, r7, #14
 8000244:	2201      	movs	r2, #1
 8000246:	4619      	mov	r1, r3
 8000248:	4817      	ldr	r0, [pc, #92]	; (80002a8 <spi_led_ctrl+0x88>)
 800024a:	f000 fca1 	bl	8000b90 <SPI_Recieve>
	// send dummy byte to recieve response
	SPI_SendData(SPI2, &dummy_write, 1);
 800024e:	f107 030f 	add.w	r3, r7, #15
 8000252:	2201      	movs	r2, #1
 8000254:	4619      	mov	r1, r3
 8000256:	4814      	ldr	r0, [pc, #80]	; (80002a8 <spi_led_ctrl+0x88>)
 8000258:	f000 fc57 	bl	8000b0a <SPI_SendData>
	// read ackbyte
	SPI_Recieve(SPI2, &ackbyte, 1);
 800025c:	f107 030d 	add.w	r3, r7, #13
 8000260:	2201      	movs	r2, #1
 8000262:	4619      	mov	r1, r3
 8000264:	4810      	ldr	r0, [pc, #64]	; (80002a8 <spi_led_ctrl+0x88>)
 8000266:	f000 fc93 	bl	8000b90 <SPI_Recieve>
	//check ackbyte
	if(SPI_VerifyResponse(ackbyte))
 800026a:	7b7b      	ldrb	r3, [r7, #13]
 800026c:	4618      	mov	r0, r3
 800026e:	f7ff ffc7 	bl	8000200 <SPI_VerifyResponse>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d013      	beq.n	80002a0 <spi_led_ctrl+0x80>
	{
	 //send arguments
	//pin number
		args[0] = LED_PIN  ;
 8000278:	2309      	movs	r3, #9
 800027a:	723b      	strb	r3, [r7, #8]
		// led on or off
		args[1] = LED_ON ;
 800027c:	2301      	movs	r3, #1
 800027e:	727b      	strb	r3, [r7, #9]
		delay();
 8000280:	f7ff ffa8 	bl	80001d4 <delay>
		SPI_SendData(SPI2,args,2);
 8000284:	f107 0308 	add.w	r3, r7, #8
 8000288:	2202      	movs	r2, #2
 800028a:	4619      	mov	r1, r3
 800028c:	4806      	ldr	r0, [pc, #24]	; (80002a8 <spi_led_ctrl+0x88>)
 800028e:	f000 fc3c 	bl	8000b0a <SPI_SendData>
		SPI_Recieve(SPI2,&dummy_read,2);
 8000292:	f107 030e 	add.w	r3, r7, #14
 8000296:	2202      	movs	r2, #2
 8000298:	4619      	mov	r1, r3
 800029a:	4803      	ldr	r0, [pc, #12]	; (80002a8 <spi_led_ctrl+0x88>)
 800029c:	f000 fc78 	bl	8000b90 <SPI_Recieve>
	}

}
 80002a0:	bf00      	nop
 80002a2:	3710      	adds	r7, #16
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	40003800 	.word	0x40003800

080002ac <spi_sens_read>:
void spi_sens_read ()
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
    uint8_t dummy_write = 0xff;
 80002b2:	23ff      	movs	r3, #255	; 0xff
 80002b4:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy_read ;
	uint8_t ackbyte ;
	uint8_t args;
	uint8_t commandCode = COMMAND_SENSOR_READ;
 80002b6:	2351      	movs	r3, #81	; 0x51
 80002b8:	70fb      	strb	r3, [r7, #3]
	uint8_t sensor_value ;
	// send the command to the slave
	SPI_SendData(SPI2, &commandCode, 1);
 80002ba:	1cfb      	adds	r3, r7, #3
 80002bc:	2201      	movs	r2, #1
 80002be:	4619      	mov	r1, r3
 80002c0:	4824      	ldr	r0, [pc, #144]	; (8000354 <spi_sens_read+0xa8>)
 80002c2:	f000 fc22 	bl	8000b0a <SPI_SendData>
	// do dummy read to clear off the RXNE
	SPI_Recieve(SPI2, &dummy_read, 1);
 80002c6:	1dbb      	adds	r3, r7, #6
 80002c8:	2201      	movs	r2, #1
 80002ca:	4619      	mov	r1, r3
 80002cc:	4821      	ldr	r0, [pc, #132]	; (8000354 <spi_sens_read+0xa8>)
 80002ce:	f000 fc5f 	bl	8000b90 <SPI_Recieve>
	// send dummy byte to recieve response
	SPI_SendData(SPI2, &dummy_write, 1);
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	2201      	movs	r2, #1
 80002d6:	4619      	mov	r1, r3
 80002d8:	481e      	ldr	r0, [pc, #120]	; (8000354 <spi_sens_read+0xa8>)
 80002da:	f000 fc16 	bl	8000b0a <SPI_SendData>
	// read ackbyte
	SPI_Recieve(SPI2, &ackbyte, 1);
 80002de:	1d7b      	adds	r3, r7, #5
 80002e0:	2201      	movs	r2, #1
 80002e2:	4619      	mov	r1, r3
 80002e4:	481b      	ldr	r0, [pc, #108]	; (8000354 <spi_sens_read+0xa8>)
 80002e6:	f000 fc53 	bl	8000b90 <SPI_Recieve>
	//check ackbyte
	if(SPI_VerifyResponse(ackbyte))
 80002ea:	797b      	ldrb	r3, [r7, #5]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ff87 	bl	8000200 <SPI_VerifyResponse>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d029      	beq.n	800034c <spi_sens_read+0xa0>
	{
	 //send arguments
	//pin number
		args = ANALOG_PIN0  ;
 80002f8:	2300      	movs	r3, #0
 80002fa:	713b      	strb	r3, [r7, #4]
		SPI_SendData(SPI2,&args,1);
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2201      	movs	r2, #1
 8000300:	4619      	mov	r1, r3
 8000302:	4814      	ldr	r0, [pc, #80]	; (8000354 <spi_sens_read+0xa8>)
 8000304:	f000 fc01 	bl	8000b0a <SPI_SendData>
		SPI_Recieve(SPI2,&dummy_read,1);
 8000308:	1dbb      	adds	r3, r7, #6
 800030a:	2201      	movs	r2, #1
 800030c:	4619      	mov	r1, r3
 800030e:	4811      	ldr	r0, [pc, #68]	; (8000354 <spi_sens_read+0xa8>)
 8000310:	f000 fc3e 	bl	8000b90 <SPI_Recieve>
		delay();
 8000314:	f7ff ff5e 	bl	80001d4 <delay>
		SPI_SendData(SPI2,&dummy_write,1);
 8000318:	1dfb      	adds	r3, r7, #7
 800031a:	2201      	movs	r2, #1
 800031c:	4619      	mov	r1, r3
 800031e:	480d      	ldr	r0, [pc, #52]	; (8000354 <spi_sens_read+0xa8>)
 8000320:	f000 fbf3 	bl	8000b0a <SPI_SendData>
		SPI_Recieve(SPI2,&sensor_value,1);
 8000324:	1cbb      	adds	r3, r7, #2
 8000326:	2201      	movs	r2, #1
 8000328:	4619      	mov	r1, r3
 800032a:	480a      	ldr	r0, [pc, #40]	; (8000354 <spi_sens_read+0xa8>)
 800032c:	f000 fc30 	bl	8000b90 <SPI_Recieve>
		delay();
 8000330:	f7ff ff50 	bl	80001d4 <delay>
		SPI_SendData(SPI2,&sensor_value,1);
 8000334:	1cbb      	adds	r3, r7, #2
 8000336:	2201      	movs	r2, #1
 8000338:	4619      	mov	r1, r3
 800033a:	4806      	ldr	r0, [pc, #24]	; (8000354 <spi_sens_read+0xa8>)
 800033c:	f000 fbe5 	bl	8000b0a <SPI_SendData>
		SPI_Recieve(SPI2,&dummy_read,1);
 8000340:	1dbb      	adds	r3, r7, #6
 8000342:	2201      	movs	r2, #1
 8000344:	4619      	mov	r1, r3
 8000346:	4803      	ldr	r0, [pc, #12]	; (8000354 <spi_sens_read+0xa8>)
 8000348:	f000 fc22 	bl	8000b90 <SPI_Recieve>

	}
}
 800034c:	bf00      	nop
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40003800 	.word	0x40003800

08000358 <spi_led_read>:
void spi_led_read ()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
    uint8_t dummy_write = 0xff;
 800035e:	23ff      	movs	r3, #255	; 0xff
 8000360:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy_read ;
	uint8_t ackbyte ;
	uint8_t args;
	uint8_t commandCode = COMMAND_LED_READ;
 8000362:	2352      	movs	r3, #82	; 0x52
 8000364:	70fb      	strb	r3, [r7, #3]
	uint8_t Led_value ;
	// send the command to the slave
	SPI_SendData(SPI2, &commandCode, 1);
 8000366:	1cfb      	adds	r3, r7, #3
 8000368:	2201      	movs	r2, #1
 800036a:	4619      	mov	r1, r3
 800036c:	4824      	ldr	r0, [pc, #144]	; (8000400 <spi_led_read+0xa8>)
 800036e:	f000 fbcc 	bl	8000b0a <SPI_SendData>
	// do dummy read to clear off the RXNE
	SPI_Recieve(SPI2, &dummy_read, 1);
 8000372:	1dbb      	adds	r3, r7, #6
 8000374:	2201      	movs	r2, #1
 8000376:	4619      	mov	r1, r3
 8000378:	4821      	ldr	r0, [pc, #132]	; (8000400 <spi_led_read+0xa8>)
 800037a:	f000 fc09 	bl	8000b90 <SPI_Recieve>
	// send dummy byte to recieve response
	SPI_SendData(SPI2, &dummy_write, 1);
 800037e:	1dfb      	adds	r3, r7, #7
 8000380:	2201      	movs	r2, #1
 8000382:	4619      	mov	r1, r3
 8000384:	481e      	ldr	r0, [pc, #120]	; (8000400 <spi_led_read+0xa8>)
 8000386:	f000 fbc0 	bl	8000b0a <SPI_SendData>
	// read ackbyte
	SPI_Recieve(SPI2, &ackbyte, 1);
 800038a:	1d7b      	adds	r3, r7, #5
 800038c:	2201      	movs	r2, #1
 800038e:	4619      	mov	r1, r3
 8000390:	481b      	ldr	r0, [pc, #108]	; (8000400 <spi_led_read+0xa8>)
 8000392:	f000 fbfd 	bl	8000b90 <SPI_Recieve>
	//check ackbyte
	if(SPI_VerifyResponse(ackbyte))
 8000396:	797b      	ldrb	r3, [r7, #5]
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ff31 	bl	8000200 <SPI_VerifyResponse>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d029      	beq.n	80003f8 <spi_led_read+0xa0>
	{
	 //send arguments
	//pin number
		args = LED_PIN ;
 80003a4:	2309      	movs	r3, #9
 80003a6:	713b      	strb	r3, [r7, #4]
		SPI_SendData(SPI2,&args,1);
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2201      	movs	r2, #1
 80003ac:	4619      	mov	r1, r3
 80003ae:	4814      	ldr	r0, [pc, #80]	; (8000400 <spi_led_read+0xa8>)
 80003b0:	f000 fbab 	bl	8000b0a <SPI_SendData>
		SPI_Recieve(SPI2,&dummy_read,1);
 80003b4:	1dbb      	adds	r3, r7, #6
 80003b6:	2201      	movs	r2, #1
 80003b8:	4619      	mov	r1, r3
 80003ba:	4811      	ldr	r0, [pc, #68]	; (8000400 <spi_led_read+0xa8>)
 80003bc:	f000 fbe8 	bl	8000b90 <SPI_Recieve>
		delay();
 80003c0:	f7ff ff08 	bl	80001d4 <delay>
		SPI_SendData(SPI2,&dummy_write,1);
 80003c4:	1dfb      	adds	r3, r7, #7
 80003c6:	2201      	movs	r2, #1
 80003c8:	4619      	mov	r1, r3
 80003ca:	480d      	ldr	r0, [pc, #52]	; (8000400 <spi_led_read+0xa8>)
 80003cc:	f000 fb9d 	bl	8000b0a <SPI_SendData>
		SPI_Recieve(SPI2,&Led_value,1);
 80003d0:	1cbb      	adds	r3, r7, #2
 80003d2:	2201      	movs	r2, #1
 80003d4:	4619      	mov	r1, r3
 80003d6:	480a      	ldr	r0, [pc, #40]	; (8000400 <spi_led_read+0xa8>)
 80003d8:	f000 fbda 	bl	8000b90 <SPI_Recieve>
		delay();
 80003dc:	f7ff fefa 	bl	80001d4 <delay>
		SPI_SendData(SPI2,&Led_value,1);
 80003e0:	1cbb      	adds	r3, r7, #2
 80003e2:	2201      	movs	r2, #1
 80003e4:	4619      	mov	r1, r3
 80003e6:	4806      	ldr	r0, [pc, #24]	; (8000400 <spi_led_read+0xa8>)
 80003e8:	f000 fb8f 	bl	8000b0a <SPI_SendData>
		SPI_Recieve(SPI2,&dummy_read,1);
 80003ec:	1dbb      	adds	r3, r7, #6
 80003ee:	2201      	movs	r2, #1
 80003f0:	4619      	mov	r1, r3
 80003f2:	4803      	ldr	r0, [pc, #12]	; (8000400 <spi_led_read+0xa8>)
 80003f4:	f000 fbcc 	bl	8000b90 <SPI_Recieve>

	}
}
 80003f8:	bf00      	nop
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40003800 	.word	0x40003800

08000404 <SPI2_GPIOInits>:
void SPI2_GPIOInits(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
	GPIO_Handler SPIPins;

	SPIPins.GPIOX = GPIOB;
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <SPI2_GPIOInits+0x58>)
 800040c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_Pin_Conf.PinMode  = GPIO_MODE_ALTFN;
 800040e:	2302      	movs	r3, #2
 8000410:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_Pin_Conf.PinAltFn = 5;
 8000412:	2305      	movs	r3, #5
 8000414:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_Pin_Conf.PinOPTYP = GPIO_OUTYPE_PP;
 8000416:	2300      	movs	r3, #0
 8000418:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_Pin_Conf.PinPUPDR = GPIO_PIN_PUPD_NO;
 800041a:	2300      	movs	r3, #0
 800041c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_Pin_Conf.PinSpeed = GPIO_OUTSPEED_HIGH;
 800041e:	2302      	movs	r3, #2
 8000420:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_Pin_Conf.PinNum = GPIO_PIN_13;
 8000422:	230d      	movs	r3, #13
 8000424:	723b      	strb	r3, [r7, #8]
	GPIO_init(&SPIPins);
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	4618      	mov	r0, r3
 800042a:	f000 f905 	bl	8000638 <GPIO_init>

	//MOSI
	SPIPins.GPIO_Pin_Conf.PinNum  = GPIO_PIN_15;
 800042e:	230f      	movs	r3, #15
 8000430:	723b      	strb	r3, [r7, #8]
	GPIO_init(&SPIPins);
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4618      	mov	r0, r3
 8000436:	f000 f8ff 	bl	8000638 <GPIO_init>


	//MISO
	SPIPins.GPIO_Pin_Conf.PinNum  = GPIO_PIN_14;
 800043a:	230e      	movs	r3, #14
 800043c:	723b      	strb	r3, [r7, #8]
		GPIO_init(&SPIPins);
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	4618      	mov	r0, r3
 8000442:	f000 f8f9 	bl	8000638 <GPIO_init>


	//NSS
	SPIPins.GPIO_Pin_Conf.PinNum = GPIO_PIN_12;
 8000446:	230c      	movs	r3, #12
 8000448:	723b      	strb	r3, [r7, #8]
	GPIO_init(&SPIPins);
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	4618      	mov	r0, r3
 800044e:	f000 f8f3 	bl	8000638 <GPIO_init>

}
 8000452:	bf00      	nop
 8000454:	3710      	adds	r7, #16
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40020400 	.word	0x40020400

08000460 <SPI2_Inits>:
void SPI2_Inits(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0

	SPI_Handler SPI2handle;

	SPI2handle.pSPI = SPI2;
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <SPI2_Inits+0x38>)
 8000468:	607b      	str	r3, [r7, #4]
	SPI2handle.SpiConfig.SPI_BusConfg = SPI_BUS_CONFIG_FD;
 800046a:	2301      	movs	r3, #1
 800046c:	727b      	strb	r3, [r7, #9]
	SPI2handle.SpiConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800046e:	2301      	movs	r3, #1
 8000470:	723b      	strb	r3, [r7, #8]
	SPI2handle.SpiConfig.SPI_Speed = SPI_SPEED_DIV32;
 8000472:	2304      	movs	r3, #4
 8000474:	73bb      	strb	r3, [r7, #14]
	SPI2handle.SpiConfig.SPI_DFF = SPI_DFF_8_BITS;
 8000476:	2300      	movs	r3, #0
 8000478:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SpiConfig.SPI_CPOL = SPI_CPOL_LOW;
 800047a:	2300      	movs	r3, #0
 800047c:	733b      	strb	r3, [r7, #12]
	SPI2handle.SpiConfig.SPI_CPHA = SPI_CPHA_LOW;
 800047e:	2300      	movs	r3, #0
 8000480:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SpiConfig.SPI_SSM = SPI_SSM_DS; //Hardware slave management enabled for NSS pin
 8000482:	2300      	movs	r3, #0
 8000484:	737b      	strb	r3, [r7, #13]

	SPI_init(&SPI2handle);
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	4618      	mov	r0, r3
 800048a:	f000 fae3 	bl	8000a54 <SPI_init>
}
 800048e:	bf00      	nop
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40003800 	.word	0x40003800

0800049c <GPIO_ButtonInit>:
void GPIO_ButtonInit(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
	GPIO_Handler GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.GPIOX = GPIOA;
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <GPIO_ButtonInit+0x2c>)
 80004a4:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_Pin_Conf.PinNum    = GPIO_PIN_0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_Pin_Conf.PinMode   = GPIO_MODE_IN;
 80004aa:	2300      	movs	r3, #0
 80004ac:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_Pin_Conf.PinSpeed  = GPIO_OUTSPEED_HIGH;
 80004ae:	2302      	movs	r3, #2
 80004b0:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_Pin_Conf.PinPUPDR  = GPIO_PIN_PUPD_NO;
 80004b2:	2300      	movs	r3, #0
 80004b4:	72fb      	strb	r3, [r7, #11]

	GPIO_init(&GPIOBtn);
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 f8bd 	bl	8000638 <GPIO_init>

}
 80004be:	bf00      	nop
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40020000 	.word	0x40020000

080004cc <main>:

int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 80004d0:	f7ff ffe4 	bl	800049c <GPIO_ButtonInit>
	//this function is used to initialize the GPIO pins to behave as SPI2 pins
		SPI2_GPIOInits();
 80004d4:	f7ff ff96 	bl	8000404 <SPI2_GPIOInits>
	//This function is used to initialize the SPI2 peripheral parameters
		SPI2_Inits();
 80004d8:	f7ff ffc2 	bl	8000460 <SPI2_Inits>
		* making SSOE 1 does NSS output enable.
		* The NSS pin is automatically managed by the hardware.
		* i.e when SPE=1 , NSS will be pulled to low
		* and NSS pin will be high when SPE=0
		*/
		SPI_ssoe_conf(SPI2,ENABLE);
 80004dc:	2101      	movs	r1, #1
 80004de:	481c      	ldr	r0, [pc, #112]	; (8000550 <main+0x84>)
 80004e0:	f000 fba8 	bl	8000c34 <SPI_ssoe_conf>
	while(1)
		{
			//wait till button is pressed
			while( ! GPIO_ReadPin(GPIOA,GPIO_PIN_0) );
 80004e4:	bf00      	nop
 80004e6:	2100      	movs	r1, #0
 80004e8:	481a      	ldr	r0, [pc, #104]	; (8000554 <main+0x88>)
 80004ea:	f000 fa1b 	bl	8000924 <GPIO_ReadPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d0f8      	beq.n	80004e6 <main+0x1a>
			//to avoid button de-bouncing related issues 200ms of delay
			delay();
 80004f4:	f7ff fe6e 	bl	80001d4 <delay>
			SPI_PeripheralControl(SPI2,ENABLE);
 80004f8:	2101      	movs	r1, #1
 80004fa:	4815      	ldr	r0, [pc, #84]	; (8000550 <main+0x84>)
 80004fc:	f000 fb7f 	bl	8000bfe <SPI_PeripheralControl>

			// turn on the led in pin 9
            spi_led_ctrl();
 8000500:	f7ff fe8e 	bl	8000220 <spi_led_ctrl>

            while( ! GPIO_ReadPin(GPIOA,GPIO_PIN_0) );
 8000504:	bf00      	nop
 8000506:	2100      	movs	r1, #0
 8000508:	4812      	ldr	r0, [pc, #72]	; (8000554 <main+0x88>)
 800050a:	f000 fa0b 	bl	8000924 <GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0f8      	beq.n	8000506 <main+0x3a>
           //to avoid button de-bouncing related issues 200ms of delay
            delay();
 8000514:	f7ff fe5e 	bl	80001d4 <delay>
            // read the sensor value  on A0
            spi_sens_read ();
 8000518:	f7ff fec8 	bl	80002ac <spi_sens_read>


            while( ! GPIO_ReadPin(GPIOA,GPIO_PIN_0) );
 800051c:	bf00      	nop
 800051e:	2100      	movs	r1, #0
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <main+0x88>)
 8000522:	f000 f9ff 	bl	8000924 <GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d0f8      	beq.n	800051e <main+0x52>
            //to avoid button de-bouncing related issues 200ms of delay
             delay();
 800052c:	f7ff fe52 	bl	80001d4 <delay>
             // read the led value  on led_pin
             spi_led_read ();
 8000530:	f7ff ff12 	bl	8000358 <spi_led_read>

			// wait until the spi finish sending data
			while( GetFlagStatus(SPI2,SPI_BSY_FLAG) );
 8000534:	bf00      	nop
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x84>)
 800053a:	f000 fa08 	bl	800094e <GetFlagStatus>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d1f8      	bne.n	8000536 <main+0x6a>
			//Disable the SPI2 peripheral
			SPI_PeripheralControl(SPI2,DISABLE);
 8000544:	2100      	movs	r1, #0
 8000546:	4802      	ldr	r0, [pc, #8]	; (8000550 <main+0x84>)
 8000548:	f000 fb59 	bl	8000bfe <SPI_PeripheralControl>
			while( ! GPIO_ReadPin(GPIOA,GPIO_PIN_0) );
 800054c:	e7ca      	b.n	80004e4 <main+0x18>
 800054e:	bf00      	nop
 8000550:	40003800 	.word	0x40003800
 8000554:	40020000 	.word	0x40020000

08000558 <GPIO_clkCntrl>:
*
* @Note              -  none

 */
void GPIO_clkCntrl(GPIO_REGDEF *pGpio, uint8_t EnOrDsi)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	460b      	mov	r3, r1
 8000562:	70fb      	strb	r3, [r7, #3]
    if (EnOrDsi == ENABLE)
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d12b      	bne.n	80005c2 <GPIO_clkCntrl+0x6a>
    {
        if (pGpio == GPIOA)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a2d      	ldr	r2, [pc, #180]	; (8000624 <GPIO_clkCntrl+0xcc>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d106      	bne.n	8000580 <GPIO_clkCntrl+0x28>
        {
            GPIOA_PCLK_EN;
 8000572:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <GPIO_clkCntrl+0xd0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a2c      	ldr	r2, [pc, #176]	; (8000628 <GPIO_clkCntrl+0xd0>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
        else if (pGpio == GPIOD)
        {
            GPIOD_PCLK_DS;
        }
    }
}
 800057e:	e04b      	b.n	8000618 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOB)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a2a      	ldr	r2, [pc, #168]	; (800062c <GPIO_clkCntrl+0xd4>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d106      	bne.n	8000596 <GPIO_clkCntrl+0x3e>
            GPIOB_PCLK_EN;
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <GPIO_clkCntrl+0xd0>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	4a26      	ldr	r2, [pc, #152]	; (8000628 <GPIO_clkCntrl+0xd0>)
 800058e:	f043 0302 	orr.w	r3, r3, #2
 8000592:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000594:	e040      	b.n	8000618 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOC)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a25      	ldr	r2, [pc, #148]	; (8000630 <GPIO_clkCntrl+0xd8>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d106      	bne.n	80005ac <GPIO_clkCntrl+0x54>
            GPIOC_PCLK_EN;
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <GPIO_clkCntrl+0xd0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a21      	ldr	r2, [pc, #132]	; (8000628 <GPIO_clkCntrl+0xd0>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005aa:	e035      	b.n	8000618 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOD)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a21      	ldr	r2, [pc, #132]	; (8000634 <GPIO_clkCntrl+0xdc>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d131      	bne.n	8000618 <GPIO_clkCntrl+0xc0>
            GPIOD_PCLK_EN;
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <GPIO_clkCntrl+0xd0>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	4a1b      	ldr	r2, [pc, #108]	; (8000628 <GPIO_clkCntrl+0xd0>)
 80005ba:	f043 0308 	orr.w	r3, r3, #8
 80005be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c0:	e02a      	b.n	8000618 <GPIO_clkCntrl+0xc0>
        if (pGpio == GPIOA)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a17      	ldr	r2, [pc, #92]	; (8000624 <GPIO_clkCntrl+0xcc>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d106      	bne.n	80005d8 <GPIO_clkCntrl+0x80>
            GPIOA_PCLK_DS;
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <GPIO_clkCntrl+0xd0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a16      	ldr	r2, [pc, #88]	; (8000628 <GPIO_clkCntrl+0xd0>)
 80005d0:	f023 0301 	bic.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d6:	e01f      	b.n	8000618 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOB)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a14      	ldr	r2, [pc, #80]	; (800062c <GPIO_clkCntrl+0xd4>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d106      	bne.n	80005ee <GPIO_clkCntrl+0x96>
            GPIOB_PCLK_DS;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <GPIO_clkCntrl+0xd0>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	4a10      	ldr	r2, [pc, #64]	; (8000628 <GPIO_clkCntrl+0xd0>)
 80005e6:	f023 0302 	bic.w	r3, r3, #2
 80005ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ec:	e014      	b.n	8000618 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOC)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <GPIO_clkCntrl+0xd8>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d106      	bne.n	8000604 <GPIO_clkCntrl+0xac>
            GPIOC_PCLK_DS;
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <GPIO_clkCntrl+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <GPIO_clkCntrl+0xd0>)
 80005fc:	f023 0304 	bic.w	r3, r3, #4
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000602:	e009      	b.n	8000618 <GPIO_clkCntrl+0xc0>
        else if (pGpio == GPIOD)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <GPIO_clkCntrl+0xdc>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d105      	bne.n	8000618 <GPIO_clkCntrl+0xc0>
            GPIOD_PCLK_DS;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <GPIO_clkCntrl+0xd0>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a05      	ldr	r2, [pc, #20]	; (8000628 <GPIO_clkCntrl+0xd0>)
 8000612:	f023 0308 	bic.w	r3, r3, #8
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40020000 	.word	0x40020000
 8000628:	40023800 	.word	0x40023800
 800062c:	40020400 	.word	0x40020400
 8000630:	40020800 	.word	0x40020800
 8000634:	40020c00 	.word	0x40020c00

08000638 <GPIO_init>:
* @Note              -  none

 */
void GPIO_init(GPIO_Handler *pGpioHandler)

{ // pin number
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	 GPIO_clkCntrl(pGpioHandler ->GPIOX, ENABLE);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2101      	movs	r1, #1
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ff86 	bl	8000558 <GPIO_clkCntrl>
	 uint32_t temp =0 ;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
    if (pGpioHandler->GPIO_Pin_Conf.PinMode <= GPIO_MODE_ANALOG)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	795b      	ldrb	r3, [r3, #5]
 8000654:	2b03      	cmp	r3, #3
 8000656:	f200 80bf 	bhi.w	80007d8 <GPIO_init+0x1a0>
    {
        // pin mode

        temp |= ((pGpioHandler->GPIO_Pin_Conf.PinMode) << (2 * (pGpioHandler->GPIO_Pin_Conf.PinNum)));
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	795b      	ldrb	r3, [r3, #5]
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	461a      	mov	r2, r3
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	4313      	orrs	r3, r2
 8000670:	617b      	str	r3, [r7, #20]
        pGpioHandler->GPIOX->MODER &= ~((0x3) << (pGpioHandler->GPIO_Pin_Conf.PinNum));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	4619      	mov	r1, r3
 800067e:	2303      	movs	r3, #3
 8000680:	408b      	lsls	r3, r1
 8000682:	43db      	mvns	r3, r3
 8000684:	4619      	mov	r1, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	400a      	ands	r2, r1
 800068c:	601a      	str	r2, [r3, #0]
        pGpioHandler->GPIOX->MODER |= temp;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	6819      	ldr	r1, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	697a      	ldr	r2, [r7, #20]
 800069a:	430a      	orrs	r2, r1
 800069c:	601a      	str	r2, [r3, #0]

        // pin speed
        temp |= ((pGpioHandler->GPIO_Pin_Conf.PinSpeed) << (2 * (pGpioHandler->GPIO_Pin_Conf.PinNum)));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	799b      	ldrb	r3, [r3, #6]
 80006a2:	461a      	mov	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	617b      	str	r3, [r7, #20]
        pGpioHandler->GPIOX->OSPEEDR &= ~((0x3) << (pGpioHandler->GPIO_Pin_Conf.PinNum));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	689a      	ldr	r2, [r3, #8]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	791b      	ldrb	r3, [r3, #4]
 80006c0:	4619      	mov	r1, r3
 80006c2:	2303      	movs	r3, #3
 80006c4:	408b      	lsls	r3, r1
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4619      	mov	r1, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	400a      	ands	r2, r1
 80006d0:	609a      	str	r2, [r3, #8]
        pGpioHandler->GPIOX->OSPEEDR |= temp;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	6899      	ldr	r1, [r3, #8]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	430a      	orrs	r2, r1
 80006e0:	609a      	str	r2, [r3, #8]

        // pin pupd control

        temp |= ((pGpioHandler->GPIO_Pin_Conf.PinPUPDR) << (2 * (pGpioHandler->GPIO_Pin_Conf.PinNum)));
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	79db      	ldrb	r3, [r3, #7]
 80006e6:	461a      	mov	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	617b      	str	r3, [r7, #20]
        pGpioHandler->GPIOX->PUPDR &= ~((0x3) << (2 * pGpioHandler->GPIO_Pin_Conf.PinNum));
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	68da      	ldr	r2, [r3, #12]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	2103      	movs	r1, #3
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	4619      	mov	r1, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	400a      	ands	r2, r1
 8000716:	60da      	str	r2, [r3, #12]
        pGpioHandler->GPIOX->PUPDR |= temp;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	68d9      	ldr	r1, [r3, #12]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	430a      	orrs	r2, r1
 8000726:	60da      	str	r2, [r3, #12]

        // pin otype control

        temp |= ((pGpioHandler->GPIO_Pin_Conf.PinOPTYP) << ((pGpioHandler->GPIO_Pin_Conf.PinNum)));
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	7a1b      	ldrb	r3, [r3, #8]
 800072c:	461a      	mov	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	791b      	ldrb	r3, [r3, #4]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	461a      	mov	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	4313      	orrs	r3, r2
 800073c:	617b      	str	r3, [r7, #20]
        pGpioHandler->GPIOX->OTYPER &= ~((0x3) << (pGpioHandler->GPIO_Pin_Conf.PinNum));
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	4619      	mov	r1, r3
 800074a:	2303      	movs	r3, #3
 800074c:	408b      	lsls	r3, r1
 800074e:	43db      	mvns	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	400a      	ands	r2, r1
 8000758:	605a      	str	r2, [r3, #4]
        pGpioHandler->GPIOX->OTYPER |= temp;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6859      	ldr	r1, [r3, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	697a      	ldr	r2, [r7, #20]
 8000766:	430a      	orrs	r2, r1
 8000768:	605a      	str	r2, [r3, #4]

        // pin alternate fn  control
        if ((pGpioHandler->GPIO_Pin_Conf.PinMode) == GPIO_MODE_ALTFN)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	795b      	ldrb	r3, [r3, #5]
 800076e:	2b02      	cmp	r3, #2
 8000770:	f040 80c6 	bne.w	8000900 <GPIO_init+0x2c8>
        {
            // config for the alt fn
            uint8_t temp1, temp2;
            temp1 = (pGpioHandler->GPIO_Pin_Conf.PinNum) / 8;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	791b      	ldrb	r3, [r3, #4]
 8000778:	08db      	lsrs	r3, r3, #3
 800077a:	743b      	strb	r3, [r7, #16]
            temp2 = (pGpioHandler->GPIO_Pin_Conf.PinNum) % 8;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	73fb      	strb	r3, [r7, #15]
            pGpioHandler->GPIOX->AFR[temp1] &= ~((0xF) << (temp2));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	7c3a      	ldrb	r2, [r7, #16]
 800078c:	3208      	adds	r2, #8
 800078e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	220f      	movs	r2, #15
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43db      	mvns	r3, r3
 800079c:	4618      	mov	r0, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	7c3a      	ldrb	r2, [r7, #16]
 80007a4:	4001      	ands	r1, r0
 80007a6:	3208      	adds	r2, #8
 80007a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            pGpioHandler->GPIOX->AFR[temp1] |= ((pGpioHandler->GPIO_Pin_Conf.PinAltFn) << (4 * (temp2)));
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	7c3a      	ldrb	r2, [r7, #16]
 80007b2:	3208      	adds	r2, #8
 80007b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7a5b      	ldrb	r3, [r3, #9]
 80007bc:	461a      	mov	r2, r3
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	7c3a      	ldrb	r2, [r7, #16]
 80007ce:	4301      	orrs	r1, r0
 80007d0:	3208      	adds	r2, #8
 80007d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                // ENABLE INTERRUPT DELIVERY
                EXTI ->IMR |= ( 1 <<pGpioHandler->GPIO_Pin_Conf.PinNum );


        }
}
 80007d6:	e093      	b.n	8000900 <GPIO_init+0x2c8>
            if (pGpioHandler->GPIO_Pin_Conf.PinMode == GPIO_MODE_IT_FT )
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	795b      	ldrb	r3, [r3, #5]
 80007dc:	2b04      	cmp	r3, #4
 80007de:	d117      	bne.n	8000810 <GPIO_init+0x1d8>
                EXTI ->FTSR |= (1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 80007e0:	4b49      	ldr	r3, [pc, #292]	; (8000908 <GPIO_init+0x2d0>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	687a      	ldr	r2, [r7, #4]
 80007e6:	7912      	ldrb	r2, [r2, #4]
 80007e8:	4611      	mov	r1, r2
 80007ea:	2201      	movs	r2, #1
 80007ec:	408a      	lsls	r2, r1
 80007ee:	4611      	mov	r1, r2
 80007f0:	4a45      	ldr	r2, [pc, #276]	; (8000908 <GPIO_init+0x2d0>)
 80007f2:	430b      	orrs	r3, r1
 80007f4:	60d3      	str	r3, [r2, #12]
                EXTI ->RTSR &= ~(1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 80007f6:	4b44      	ldr	r3, [pc, #272]	; (8000908 <GPIO_init+0x2d0>)
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	7912      	ldrb	r2, [r2, #4]
 80007fe:	4611      	mov	r1, r2
 8000800:	2201      	movs	r2, #1
 8000802:	408a      	lsls	r2, r1
 8000804:	43d2      	mvns	r2, r2
 8000806:	4611      	mov	r1, r2
 8000808:	4a3f      	ldr	r2, [pc, #252]	; (8000908 <GPIO_init+0x2d0>)
 800080a:	400b      	ands	r3, r1
 800080c:	6093      	str	r3, [r2, #8]
 800080e:	e035      	b.n	800087c <GPIO_init+0x244>
            else if (pGpioHandler->GPIO_Pin_Conf.PinMode == GPIO_MODE_IT_RT)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	795b      	ldrb	r3, [r3, #5]
 8000814:	2b05      	cmp	r3, #5
 8000816:	d117      	bne.n	8000848 <GPIO_init+0x210>
                EXTI ->RTSR |= (1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 8000818:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <GPIO_init+0x2d0>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	7912      	ldrb	r2, [r2, #4]
 8000820:	4611      	mov	r1, r2
 8000822:	2201      	movs	r2, #1
 8000824:	408a      	lsls	r2, r1
 8000826:	4611      	mov	r1, r2
 8000828:	4a37      	ldr	r2, [pc, #220]	; (8000908 <GPIO_init+0x2d0>)
 800082a:	430b      	orrs	r3, r1
 800082c:	6093      	str	r3, [r2, #8]
                EXTI ->FTSR &= ~(1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 800082e:	4b36      	ldr	r3, [pc, #216]	; (8000908 <GPIO_init+0x2d0>)
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	7912      	ldrb	r2, [r2, #4]
 8000836:	4611      	mov	r1, r2
 8000838:	2201      	movs	r2, #1
 800083a:	408a      	lsls	r2, r1
 800083c:	43d2      	mvns	r2, r2
 800083e:	4611      	mov	r1, r2
 8000840:	4a31      	ldr	r2, [pc, #196]	; (8000908 <GPIO_init+0x2d0>)
 8000842:	400b      	ands	r3, r1
 8000844:	60d3      	str	r3, [r2, #12]
 8000846:	e019      	b.n	800087c <GPIO_init+0x244>
            else if (pGpioHandler->GPIO_Pin_Conf.PinMode == GPIO_MODE_IT_RFT)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	795b      	ldrb	r3, [r3, #5]
 800084c:	2b06      	cmp	r3, #6
 800084e:	d115      	bne.n	800087c <GPIO_init+0x244>
                EXTI ->RTSR |=  (1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <GPIO_init+0x2d0>)
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	7912      	ldrb	r2, [r2, #4]
 8000858:	4611      	mov	r1, r2
 800085a:	2201      	movs	r2, #1
 800085c:	408a      	lsls	r2, r1
 800085e:	4611      	mov	r1, r2
 8000860:	4a29      	ldr	r2, [pc, #164]	; (8000908 <GPIO_init+0x2d0>)
 8000862:	430b      	orrs	r3, r1
 8000864:	6093      	str	r3, [r2, #8]
                EXTI ->FTSR |=  (1 <<pGpioHandler->GPIO_Pin_Conf.PinNum ) ;
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <GPIO_init+0x2d0>)
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	7912      	ldrb	r2, [r2, #4]
 800086e:	4611      	mov	r1, r2
 8000870:	2201      	movs	r2, #1
 8000872:	408a      	lsls	r2, r1
 8000874:	4611      	mov	r1, r2
 8000876:	4a24      	ldr	r2, [pc, #144]	; (8000908 <GPIO_init+0x2d0>)
 8000878:	430b      	orrs	r3, r1
 800087a:	60d3      	str	r3, [r2, #12]
                uint8_t temp4  =pGpioHandler->GPIO_Pin_Conf.PinNum / 4;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	089b      	lsrs	r3, r3, #2
 8000882:	74fb      	strb	r3, [r7, #19]
                uint8_t temp5 =pGpioHandler->GPIO_Pin_Conf.PinNum % 4;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	791b      	ldrb	r3, [r3, #4]
 8000888:	f003 0303 	and.w	r3, r3, #3
 800088c:	74bb      	strb	r3, [r7, #18]
                uint8_t pinCode = GPIO_BASE_CODE(pGpioHandler->GPIOX) ;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a1e      	ldr	r2, [pc, #120]	; (800090c <GPIO_init+0x2d4>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d016      	beq.n	80008c6 <GPIO_init+0x28e>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a1c      	ldr	r2, [pc, #112]	; (8000910 <GPIO_init+0x2d8>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d00f      	beq.n	80008c2 <GPIO_init+0x28a>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a1b      	ldr	r2, [pc, #108]	; (8000914 <GPIO_init+0x2dc>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d008      	beq.n	80008be <GPIO_init+0x286>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a19      	ldr	r2, [pc, #100]	; (8000918 <GPIO_init+0x2e0>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d101      	bne.n	80008ba <GPIO_init+0x282>
 80008b6:	2303      	movs	r3, #3
 80008b8:	e006      	b.n	80008c8 <GPIO_init+0x290>
 80008ba:	2300      	movs	r3, #0
 80008bc:	e004      	b.n	80008c8 <GPIO_init+0x290>
 80008be:	2302      	movs	r3, #2
 80008c0:	e002      	b.n	80008c8 <GPIO_init+0x290>
 80008c2:	2301      	movs	r3, #1
 80008c4:	e000      	b.n	80008c8 <GPIO_init+0x290>
 80008c6:	2300      	movs	r3, #0
 80008c8:	747b      	strb	r3, [r7, #17]
                SYSCFG_PCLK_EN;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <GPIO_init+0x2e4>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a13      	ldr	r2, [pc, #76]	; (800091c <GPIO_init+0x2e4>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
                SYSCFG -> EXTICR[temp4] = (pinCode << temp5 * 4 );
 80008d6:	7c7a      	ldrb	r2, [r7, #17]
 80008d8:	7cbb      	ldrb	r3, [r7, #18]
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	fa02 f103 	lsl.w	r1, r2, r3
 80008e0:	4a0f      	ldr	r2, [pc, #60]	; (8000920 <GPIO_init+0x2e8>)
 80008e2:	7cfb      	ldrb	r3, [r7, #19]
 80008e4:	3302      	adds	r3, #2
 80008e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                EXTI ->IMR |= ( 1 <<pGpioHandler->GPIO_Pin_Conf.PinNum );
 80008ea:	4b07      	ldr	r3, [pc, #28]	; (8000908 <GPIO_init+0x2d0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	7912      	ldrb	r2, [r2, #4]
 80008f2:	4611      	mov	r1, r2
 80008f4:	2201      	movs	r2, #1
 80008f6:	408a      	lsls	r2, r1
 80008f8:	4611      	mov	r1, r2
 80008fa:	4a03      	ldr	r2, [pc, #12]	; (8000908 <GPIO_init+0x2d0>)
 80008fc:	430b      	orrs	r3, r1
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40013c00 	.word	0x40013c00
 800090c:	40020000 	.word	0x40020000
 8000910:	40020400 	.word	0x40020400
 8000914:	40020800 	.word	0x40020800
 8000918:	40020c00 	.word	0x40020c00
 800091c:	40023800 	.word	0x40023800
 8000920:	40013800 	.word	0x40013800

08000924 <GPIO_ReadPin>:
*
* @Note              -  none

 */
uint8_t GPIO_ReadPin(GPIO_REGDEF *pGpiox, uint8_t pinNum)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]
    uint8_t value;
    value = (uint8_t)(((pGpiox->IDR) >> pinNum) & (BIT_MASK_8));
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	691a      	ldr	r2, [r3, #16]
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	fa22 f303 	lsr.w	r3, r2, r3
 800093a:	b2db      	uxtb	r3, r3
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	73fb      	strb	r3, [r7, #15]
    return value;
 8000942:	7bfb      	ldrb	r3, [r7, #15]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <GetFlagStatus>:



/********************get flag status *************************/
uint8_t GetFlagStatus(SPI_REGDEF *pSPI , uint32_t FlagName)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
	if(pSPI->SR & FlagName)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	4013      	ands	r3, r2
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <GetFlagStatus+0x1a>
		{
			return FLAG_SET;
 8000964:	2301      	movs	r3, #1
 8000966:	e000      	b.n	800096a <GetFlagStatus+0x1c>
		}
		return FLAG_RESET;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <SPI_clkCntrl>:
* @Note              -  none

 */

void SPI_clkCntrl(SPI_REGDEF *pSpi  , uint8_t EnOrDsi)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
   if (EnOrDsi == ENABLE)
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d12b      	bne.n	80009de <SPI_clkCntrl+0x6a>
   {
     if(pSpi == SPI1 )
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a2d      	ldr	r2, [pc, #180]	; (8000a40 <SPI_clkCntrl+0xcc>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d106      	bne.n	800099c <SPI_clkCntrl+0x28>
     {
    	 SPI1_PCLK_EN();
 800098e:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <SPI_clkCntrl+0xd0>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a2c      	ldr	r2, [pc, #176]	; (8000a44 <SPI_clkCntrl+0xd0>)
 8000994:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
     {
    	 SPI4_PCLK_DS();
     }

   }
}
 800099a:	e04b      	b.n	8000a34 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI2 )
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a2a      	ldr	r2, [pc, #168]	; (8000a48 <SPI_clkCntrl+0xd4>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d106      	bne.n	80009b2 <SPI_clkCntrl+0x3e>
    	 SPI2_PCLK_EN();
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <SPI_clkCntrl+0xd0>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	4a26      	ldr	r2, [pc, #152]	; (8000a44 <SPI_clkCntrl+0xd0>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ae:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009b0:	e040      	b.n	8000a34 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI3 )
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a25      	ldr	r2, [pc, #148]	; (8000a4c <SPI_clkCntrl+0xd8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d106      	bne.n	80009c8 <SPI_clkCntrl+0x54>
    	 SPI3_PCLK_EN();
 80009ba:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <SPI_clkCntrl+0xd0>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a21      	ldr	r2, [pc, #132]	; (8000a44 <SPI_clkCntrl+0xd0>)
 80009c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009c6:	e035      	b.n	8000a34 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI4 )
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a21      	ldr	r2, [pc, #132]	; (8000a50 <SPI_clkCntrl+0xdc>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d131      	bne.n	8000a34 <SPI_clkCntrl+0xc0>
    	 SPI4_PCLK_EN();
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <SPI_clkCntrl+0xd0>)
 80009d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d4:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <SPI_clkCntrl+0xd0>)
 80009d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009da:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009dc:	e02a      	b.n	8000a34 <SPI_clkCntrl+0xc0>
     if(pSpi == SPI1 )
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <SPI_clkCntrl+0xcc>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d106      	bne.n	80009f4 <SPI_clkCntrl+0x80>
    	 SPI1_PCLK_DS();
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <SPI_clkCntrl+0xd0>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <SPI_clkCntrl+0xd0>)
 80009ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009f2:	e01f      	b.n	8000a34 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI2 )
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <SPI_clkCntrl+0xd4>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d106      	bne.n	8000a0a <SPI_clkCntrl+0x96>
    	 SPI2_PCLK_DS();
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <SPI_clkCntrl+0xd0>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <SPI_clkCntrl+0xd0>)
 8000a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a08:	e014      	b.n	8000a34 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI3 )
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <SPI_clkCntrl+0xd8>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d106      	bne.n	8000a20 <SPI_clkCntrl+0xac>
    	 SPI3_PCLK_DS();
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <SPI_clkCntrl+0xd0>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <SPI_clkCntrl+0xd0>)
 8000a18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a1e:	e009      	b.n	8000a34 <SPI_clkCntrl+0xc0>
     else if(pSpi == SPI4 )
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <SPI_clkCntrl+0xdc>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d105      	bne.n	8000a34 <SPI_clkCntrl+0xc0>
    	 SPI4_PCLK_DS();
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <SPI_clkCntrl+0xd0>)
 8000a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2c:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <SPI_clkCntrl+0xd0>)
 8000a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a32:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40013000 	.word	0x40013000
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40003800 	.word	0x40003800
 8000a4c:	40003c00 	.word	0x40003c00
 8000a50:	40013400 	.word	0x40013400

08000a54 <SPI_init>:
* @Note              -  none

 */

void SPI_init(SPI_Handler *pSPI_handler)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

	//peripheral clock enable
	SPI_clkCntrl(pSPI_handler -> pSPI , ENABLE);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2101      	movs	r1, #1
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ff86 	bl	8000974 <SPI_clkCntrl>

  // lets configure the SPI_CR1 register
   uint32_t temp = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
   //1. configure the device mode
   	temp|= (pSPI_handler -> SpiConfig.SPI_DeviceMode << SPI_CR1_MSTR) ;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	791b      	ldrb	r3, [r3, #4]
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]

   	//2. Configure the bus config
   if (pSPI_handler -> SpiConfig .SPI_BusConfg == SPI_BUS_CONFIG_FD)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	795b      	ldrb	r3, [r3, #5]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d104      	bne.n	8000a8c <SPI_init+0x38>
   {
     // enable unidirectional line
     temp &= ~(1 << SPI_CR1_BIDI_MODE);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	e014      	b.n	8000ab6 <SPI_init+0x62>

   }
  else if (pSPI_handler -> SpiConfig .SPI_BusConfg == SPI_BUS_CONFIG_HD)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	795b      	ldrb	r3, [r3, #5]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d104      	bne.n	8000a9e <SPI_init+0x4a>
   {
     // enable bidirectional line
     temp  |= (1 << SPI_CR1_BIDI_MODE);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	e00b      	b.n	8000ab6 <SPI_init+0x62>

   }
    else if (pSPI_handler -> SpiConfig .SPI_BusConfg == SPI_BUS_CONFIG_SIMPLEX_RX)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	795b      	ldrb	r3, [r3, #5]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d107      	bne.n	8000ab6 <SPI_init+0x62>
   {
      // enabble unidirectional line
     temp &= ~(1 << SPI_CR1_BIDI_MODE);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000aac:	60fb      	str	r3, [r7, #12]
     // enable recieve only mode
     temp |= (1<< SPI_CR1_RX_ONLY) ;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab4:	60fb      	str	r3, [r7, #12]

   }

   // configure the clock speed

    temp |= (pSPI_handler -> SpiConfig.SPI_Speed << SPI_CR1_BR);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	7a9b      	ldrb	r3, [r3, #10]
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	461a      	mov	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]

   // configure the DFF
   temp |= (pSPI_handler -> SpiConfig.SPI_DFF << SPI_CR1_DFF);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	799b      	ldrb	r3, [r3, #6]
 8000ac8:	02db      	lsls	r3, r3, #11
 8000aca:	461a      	mov	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]

    // configure the CPHA
   temp |= (pSPI_handler -> SpiConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	79db      	ldrb	r3, [r3, #7]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]

   // configure the CPOL
   temp |= (pSPI_handler -> SpiConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	7a1b      	ldrb	r3, [r3, #8]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]

   // configure the SSM

  temp |=  pSPI_handler -> SpiConfig.SPI_SSM << SPI_CR1_SSM;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7a5b      	ldrb	r3, [r3, #9]
 8000af0:	025b      	lsls	r3, r3, #9
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]




   // finish the configure
   pSPI_handler -> pSPI -> CR1 = temp ;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	601a      	str	r2, [r3, #0]



}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <SPI_SendData>:
 */



void SPI_SendData(SPI_REGDEF *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b084      	sub	sp, #16
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
	if ( (pSPIx->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f003 0306 	and.w	r3, r3, #6
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d02e      	beq.n	8000b80 <SPI_SendData+0x76>
	  {
	    /* Enable SPI peripheral */
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	601a      	str	r2, [r3, #0]
	  }

	while(Len > 0)
 8000b2e:	e027      	b.n	8000b80 <SPI_SendData+0x76>
	{
		//1. wait until TXE is set
		while( (GetFlagStatus(pSPIx,SPI_TXE_FLAG))  == FLAG_RESET );
 8000b30:	bf00      	nop
 8000b32:	2102      	movs	r1, #2
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f7ff ff0a 	bl	800094e <GetFlagStatus>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0f8      	beq.n	8000b32 <SPI_SendData+0x28>

		//2. check the DFF bit in CR1
		if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00e      	beq.n	8000b6a <SPI_SendData+0x60>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	60da      	str	r2, [r3, #12]
			Len--;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
			Len--;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	3301      	adds	r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	e00a      	b.n	8000b80 <SPI_SendData+0x76>
		}else
		{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	60da      	str	r2, [r3, #12]
			Len--;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d1d4      	bne.n	8000b30 <SPI_SendData+0x26>
		}
	}

}
 8000b86:	bf00      	nop
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <SPI_Recieve>:
* @Note              -  none

 */

void SPI_Recieve(SPI_REGDEF *pSPIx,uint8_t *pRxBuffer, uint32_t Len)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  while(Len > 0)
 8000b9c:	e027      	b.n	8000bee <SPI_Recieve+0x5e>
		{
	  //1. wait until RXNE is set
	  			while(GetFlagStatus(pSPIx,SPI_RXNE_FLAG)  == (uint8_t)FLAG_RESET );
 8000b9e:	bf00      	nop
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	68f8      	ldr	r0, [r7, #12]
 8000ba4:	f7ff fed3 	bl	800094e <GetFlagStatus>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0f8      	beq.n	8000ba0 <SPI_Recieve+0x10>

	  			//2. check the DFF bit in CR1
	  			if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00e      	beq.n	8000bd8 <SPI_Recieve+0x48>
	  			{
	  				//16 bit DFF
	  				//1. load the data from DR to Rxbuffer address
	  				 *((uint16_t*)pRxBuffer) = pSPIx->DR ;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	801a      	strh	r2, [r3, #0]
	  				Len--;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	607b      	str	r3, [r7, #4]
	  				Len--;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	607b      	str	r3, [r7, #4]
	  				(uint16_t*)pRxBuffer++;
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	e00a      	b.n	8000bee <SPI_Recieve+0x5e>
	  			}
	  			else
	  			{
	  				//8 bit DFF
	  				*(pRxBuffer) = pSPIx->DR ;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	701a      	strb	r2, [r3, #0]
	  				Len--;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
	  				pRxBuffer++;
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	3301      	adds	r3, #1
 8000bec:	60bb      	str	r3, [r7, #8]
  while(Len > 0)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1d4      	bne.n	8000b9e <SPI_Recieve+0xe>
	  			}
	  		}

}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <SPI_PeripheralControl>:
{

}

void SPI_PeripheralControl(SPI_REGDEF *pSPIx , uint8_t EnOrDsi)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	460b      	mov	r3, r1
 8000c08:	70fb      	strb	r3, [r7, #3]
	if ( EnOrDsi == ENABLE )
 8000c0a:	78fb      	ldrb	r3, [r7, #3]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d106      	bne.n	8000c1e <SPI_PeripheralControl+0x20>
	{
		pSPIx -> CR1 |= (1 << SPI_CR1_SPE ) ;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	601a      	str	r2, [r3, #0]

	else
	{
		pSPIx -> CR1  &= ~ (1 << SPI_CR1_SPE ) ;
	}
}
 8000c1c:	e005      	b.n	8000c2a <SPI_PeripheralControl+0x2c>
		pSPIx -> CR1  &= ~ (1 << SPI_CR1_SPE ) ;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	601a      	str	r2, [r3, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <SPI_ssoe_conf>:
}



void SPI_ssoe_conf(SPI_REGDEF *pSPIx , uint8_t EnOrDsi)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	70fb      	strb	r3, [r7, #3]
	if ( EnOrDsi == ENABLE )
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d106      	bne.n	8000c54 <SPI_ssoe_conf+0x20>
		{
			pSPIx -> CR2 |= (1 << SPI_CR2_SSOE ) ;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f043 0204 	orr.w	r2, r3, #4
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	605a      	str	r2, [r3, #4]

		else
		{
			pSPIx -> CR2  &= ~ (1 << SPI_CR2_SSOE  ) ;
		}
}
 8000c52:	e005      	b.n	8000c60 <SPI_ssoe_conf+0x2c>
			pSPIx -> CR2  &= ~ (1 << SPI_CR2_SSOE  ) ;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f023 0204 	bic.w	r2, r3, #4
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	605a      	str	r2, [r3, #4]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
	...

08000c6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c6e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c70:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	; (8000cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <LoopForever+0xe>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	; (8000cb8 <LoopForever+0x16>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c9a:	f000 f811 	bl	8000cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c9e:	f7ff fc15 	bl	80004cc <main>

08000ca2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ca2:	e7fe      	b.n	8000ca2 <LoopForever>
  ldr   r0, =_estack
 8000ca4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000cb0:	08000d28 	.word	0x08000d28
  ldr r2, =_sbss
 8000cb4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cb8:	2000001c 	.word	0x2000001c

08000cbc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC_IRQHandler>
	...

08000cc0 <__libc_init_array>:
 8000cc0:	b570      	push	{r4, r5, r6, lr}
 8000cc2:	4d0d      	ldr	r5, [pc, #52]	; (8000cf8 <__libc_init_array+0x38>)
 8000cc4:	4c0d      	ldr	r4, [pc, #52]	; (8000cfc <__libc_init_array+0x3c>)
 8000cc6:	1b64      	subs	r4, r4, r5
 8000cc8:	10a4      	asrs	r4, r4, #2
 8000cca:	2600      	movs	r6, #0
 8000ccc:	42a6      	cmp	r6, r4
 8000cce:	d109      	bne.n	8000ce4 <__libc_init_array+0x24>
 8000cd0:	4d0b      	ldr	r5, [pc, #44]	; (8000d00 <__libc_init_array+0x40>)
 8000cd2:	4c0c      	ldr	r4, [pc, #48]	; (8000d04 <__libc_init_array+0x44>)
 8000cd4:	f000 f818 	bl	8000d08 <_init>
 8000cd8:	1b64      	subs	r4, r4, r5
 8000cda:	10a4      	asrs	r4, r4, #2
 8000cdc:	2600      	movs	r6, #0
 8000cde:	42a6      	cmp	r6, r4
 8000ce0:	d105      	bne.n	8000cee <__libc_init_array+0x2e>
 8000ce2:	bd70      	pop	{r4, r5, r6, pc}
 8000ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ce8:	4798      	blx	r3
 8000cea:	3601      	adds	r6, #1
 8000cec:	e7ee      	b.n	8000ccc <__libc_init_array+0xc>
 8000cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf2:	4798      	blx	r3
 8000cf4:	3601      	adds	r6, #1
 8000cf6:	e7f2      	b.n	8000cde <__libc_init_array+0x1e>
 8000cf8:	08000d20 	.word	0x08000d20
 8000cfc:	08000d20 	.word	0x08000d20
 8000d00:	08000d20 	.word	0x08000d20
 8000d04:	08000d24 	.word	0x08000d24

08000d08 <_init>:
 8000d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0a:	bf00      	nop
 8000d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0e:	bc08      	pop	{r3}
 8000d10:	469e      	mov	lr, r3
 8000d12:	4770      	bx	lr

08000d14 <_fini>:
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d16:	bf00      	nop
 8000d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1a:	bc08      	pop	{r3}
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	4770      	bx	lr
